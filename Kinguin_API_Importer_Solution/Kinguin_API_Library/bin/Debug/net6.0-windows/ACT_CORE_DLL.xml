<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ACT_CORE_DLL</name>
    </assembly>
    <members>
        <member name="M:ACT.Core.Abstract.Security.Authentication.ACT_ABSTRACT_I_SIMPLE_SECURITY_PROVIDER_ACTIVE_DIRECTORY_LOGIN.GetUserInfo(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Required AdditionalInfo["Domain"]
            </summary>
            <param name="UserName"></param>
            <param name="Password"></param>
            <param name="AdditionalInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Communications.Ftp">
            <summary>
            File Transfer Protocal Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Communications.Http.CallGenericHandler_StringReturn(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Call WEB Page and Return String
            </summary>
            <param name="URL"></param>
            <param name="Parameters"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Communications.Http.CallGenericHandler(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Call Generic Handler
            </summary>
            <param name="URL"></param>
            <param name="Parameters"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Communications.Http.ParseQueryString(System.String)">
            <summary>
            Parse Query String
            </summary>
            <param name="FullPath"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Communications.Http.PostDataToWebsite(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Post Data To Website
            </summary>
            <param name="HeaderData"></param>
            <param name="Data"></param>
            <param name="PostURL"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.acosh(System.Double)">
            <summary>
            Returns the hyperbolic arc cosine of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.asinh(System.Double)">
            <summary>
            Returns the hyperbolic arc sine of the specified number.
            </summary>
            <param name="xx"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.atanh(System.Double)">
            <summary>
            Returns the hyperbolic arc tangent of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.j0(System.Double)">
            <summary>
            Returns the Bessel function of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.j1(System.Double)">
            <summary>
            Returns the Bessel function of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.jn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.y0(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.y1(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.yn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.fac(System.Double)">
            <summary>
            Returns the factorial of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.fac(System.Int32)">
            <summary>
            Returns the factorial of the specified number.
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.gamma(System.Double)">
            <summary>
            Returns the gamma function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.stirf(System.Double)">
            <summary>
            Return the gamma function computed by Stirling's formula.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.igamc(System.Double,System.Double)">
            <summary>
            Returns the complemented incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.igam(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.chisq(System.Double,System.Double)">
             Returns the area under the left hand tail (from 0 to x)
             of the Chi square probability density function with
             v degrees of freedom.
            
            <summary>
            Returns the chi-square function (left hand tail).
            </summary>
            <param name="df">degrees of freedom</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.chisqc(System.Double,System.Double)">
             Returns the area under the right hand tail (from x to
             infinity) of the Chi square probability density function
             with v degrees of freedom:
            
            <summary>
            Returns the chi-square function (right hand tail).
            </summary>
            <param name="df">degrees of freedom</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.poisson(System.Int32,System.Double)">
            <summary>
            Returns the sum of the first k terms of the Poisson distribution.
            </summary>
            <param name="k">number of terms</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.poissonc(System.Int32,System.Double)">
            <summary>
            Returns the sum of the terms k+1 to infinity of the Poisson distribution.
            </summary>
            <param name="k">start</param>
            <param name="x">double value</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.normal(System.Double)">
            <summary>
            Returns the area under the Gaussian probability density function, integrated from minus infinity to a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.erfc(System.Double)">
            <summary>
            Returns the complementary error function of the specified number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.erf(System.Double)">
            <summary>
            Returns the error function of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.polevl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.p1evl(System.Double,System.Double[],System.Int32)">
            <summary>
            Evaluates polynomial of degree N with assumtion that coef[N] = 1.0
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>		
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.lgamma(System.Double)">
            <summary>
            Returns the natural logarithm of gamma function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.ibeta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the incomplete beta function evaluated from zero to xx.
            </summary>
            <param name="aa"></param>
            <param name="bb"></param>
            <param name="xx"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.incbcf(System.Double,System.Double,System.Double)">
            <summary>
            Returns the continued fraction expansion #1 for incomplete beta integral.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.incbd(System.Double,System.Double,System.Double)">
            <summary>
            Returns the continued fraction expansion #2 for incomplete beta integral.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Physics.Physics_Constants.pseries(System.Double,System.Double,System.Double)">
            <summary>
            Returns the power series for incomplete beta integral. Use when b*x is small and x not too close to 1.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="F:ACT.Core.Consts.Windows.Security.TOKENCONSTANTS.BCM_SETSHIELD">
            <summary> 
            Sets the elevation required state for a specified button or  
            command link to display an elevated icon.  
            </summary> 
        </member>
        <member name="T:ACT.Core.CustomAttributes.ACT_Expensive">
            <summary>
            This indicates the Target(s) expensive and to what level the cost is relative to Infinite Perfection and Frozen
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ACT_Expensive.SpeedCost">
            <summary>
            What is the cost of this expensive code
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.ACT_Expensive.#ctor(ACT.Core.CustomAttributes.ExpenseRating)">
            <summary>
            Constructor For Marking Code as Expensive or Above Normal Measure
            </summary>
            <param name="ProcessingCost">What is the cost of this expensive code</param>
        </member>
        <member name="T:ACT.Core.CustomAttributes.ExpenseRating">
            <summary>
            Rates the expense of the Rating
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ExpenseRating.Minimal">
            <summary>
            Above Normal Defined Speed
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ExpenseRating.Signifigant">
            <summary>
            a concerning amount of performance impact
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ExpenseRating.Serious">
            <summary>
            Will slow the program down noticably
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ExpenseRating.Maximum">
            <summary>
            Will slow the program down Never use in Releases
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ExpenseRating.RediculasOnlyUseWhenAbsolutlyNeeded">
            <summary>
            Scary Use at your own risk
            </summary>
        </member>
        <member name="F:ACT.Core.CustomAttributes.ExpenseRating.Unknown">
            <summary>
            Bad but unknown dont use in releases ever.
            </summary>
        </member>
        <member name="T:ACT.Core.CustomAttributes.AttributeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.AttributeExtensions.GetAttributeValue``2(System.Type,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="type"></param>
            <param name="valueSelector"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.CustomAttributes.AttributeExtensions.GetAttributeValue(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.CustomAttributes.DatabaseTableBased">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.CustomAttributes.DatabaseTableBased.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.DatabaseTableBased.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="IsInternal"></param>
        </member>
        <member name="T:ACT.Core.CustomAttributes.Encrypted">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.CustomAttributes.Encrypted.Internal">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.Encrypted.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="IsInternal"></param>
        </member>
        <member name="T:ACT.Core.CustomAttributes.ClassID">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.CustomAttributes.ClassID.Internal">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.ClassID.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="classid"></param>
        </member>
        <member name="T:ACT.Core.CustomAttributes.StringValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.StringValue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:ACT.Core.CustomAttributes.StringValue.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:ACT.Core.CustomAttributes.DBFieldType">
            <summary>
            TODO Implement Across Usage Classes (IDataAccess) etc.
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.DBFieldType.#ctor(System.Data.DbType,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="FieldType"></param>
            <param name="Size"></param>
            <param name="Nullable"></param>
        </member>
        <member name="P:ACT.Core.CustomAttributes.DBFieldType.FieldType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.CustomAttributes.DBFieldType.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.CustomAttributes.DBFieldType.Nullable">
            <summary>
            
            </summary>
        </member>
        <member name="T:ACT.Core.CustomAttributes.ACTRequired_SystemSetting">
            <summary>
            Marks a Method or Class as Requiring the Defined System Setting
            </summary>
            
        </member>
        <member name="T:ACT.Core.CustomAttributes.ACTTesting">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.CustomAttributes.ACTTesting.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="DeveloperName"></param>
            <param name="Passed"></param>
            <param name="Ready"></param>
        </member>
        <member name="T:ACT.Core.Dynamic.ACTDynamic">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Dynamic.ACTDynamic.Name">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:ACT.Core.Dynamic.ACTDynamic.GetMemberNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Dynamic.ACTDynamic.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.Dynamic.ACTDynamic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Dynamic.ACTDynamic.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Dynamic.ACTDynamic.SetMember(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Member"></param>
            <param name="Value"></param>
        </member>
        <member name="M:ACT.Core.Dynamic.ACTDynamic.AddReplaceChild(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="ChildName"></param>
            <param name="child"></param>
        </member>
        <member name="M:ACT.Core.Dynamic.ACTDynamic.GetChild(System.String)">
            <summary>
            
            </summary>
            <param name="ChildName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Dynamic.ACTDynamic.GetObject(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Dynamic.Encoder">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Dynamic.Encoder.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.Dynamic.Encoder.LoadFromString(System.String)">
            <summary>
            
            </summary>
            <param name="FileData"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Dynamic.Encoder.LoadFromFile(System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Dynamic.Encoder.LoadFilePart(System.String[],System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="FileData"></param>
            <param name="StartPosition"></param>
            <param name="EndPosition"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Dynamic.Encoder.SaveMe(System.Object)">
            <summary>
            
            </summary>
            <param name="Me"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Dynamic.Library">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.Dynamic.Library.ExecuteDataTableMethod(System.String,System.String,System.String,System.Object[])">
            <summary>
            Executes A Static Method that executes the defined method and Returns a Data Table
            </summary>
            <param name="DLL">DLL to Execute From</param>
            <param name="ClassName">Class Name in the DLL to load</param>
            <param name="MethodName">Method Name to execute</param>
            <param name="Params">Params to load</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:ACT.Core.Dynamic.Library.LoadDLL``1(System.String,System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Load The DLL and return an instance of the specified class
            </summary>
            <typeparam name="T">Type to Return</typeparam>
            <param name="FileLocation">Location of the dll file</param>
            <param name="ClassName">Class Name To Return</param>
            <param name="Arguments">Any Arguments needed for the init of the class, default is null</param>
            <returns>instance of class</returns>
        </member>
        <member name="M:ACT.Core.Dynamic.Library.LoadDLL``1(System.String)">
            <summary>
            Loads all of the available defined types from a Dll.  Must be blank constructors
            </summary>
            <typeparam name="T">Type to look for</typeparam>
            <param name="FileLocation">DLL File Locations</param>
            <returns>List of all the DLLS Loaded</returns>
        </member>
        <member name="M:ACT.Core.Dynamic.Library.LoadDLL``1(System.Reflection.Assembly)">
            <summary>
            Loads all of the available defined types from a Dll.  Must be blank constructors
            </summary>
            <typeparam name="T">Type to look for</typeparam>
            <param name="SearchAssembly">Assembly to Search</param>
            <returns>List of all the DLLS Loaded</returns>
        </member>
        <member name="T:ACT.Core.Encoding.ACTEncoder">
            <summary>
            Base16 Encoding Class
            </summary>
        </member>
        <member name="M:ACT.Core.Encoding.ACTEncoder.encode(System.Byte[])">
            Convert bytes to a ACT string.
        </member>
        <member name="M:ACT.Core.Encoding.ACTEncoder.decode(System.String)">
            Convert a ACTEncoder string into a byte array.
        </member>
        <member name="T:ACT.Core.Encoding.Base16Encoder">
            <summary>
            Base16 Encoding Class
            </summary>
        </member>
        <member name="M:ACT.Core.Encoding.Base16Encoder.encode(System.Byte[])">
            Convert bytes to a base16 string.
        </member>
        <member name="M:ACT.Core.Encoding.Base16Encoder.decode(System.String)">
            Convert a base16 string into a byte array.
        </member>
        <member name="T:ACT.Core.Enums.Security.SecurityDifficulty">
            <summary>
            The security Difficulty of the process
            Easy = 6 Characters
            Medium = 8, Hard = 12, Impossible = 16, Galaxy = 32, Universe = 64
            Phrase + Easy = 2 Words, Phrase + Medium = 2, ... 4... 6... 8... 10...
            </summary>
        </member>
        <member name="T:ACT.Core.Enums.TemplateEngine.CacheMethod">
            <summary>
            Cache Methods Available
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.CacheMethod.Database">
            <summary>
            Database caching
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.CacheMethod.DLL">
            <summary>
            DLL Caching using external DLL for Caching
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.CacheMethod.Memory">
            <summary>
            Use Internal Caching
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.PackageType.NGT">
            <summary>
            Nebula Template Standard Package
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.PackageType.DBNGT">
            <summary>
            Nebula Database Template Package
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.TemplateType.NGT">
            <summary>
            Advanced Nebula Template
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.TemplateEngine.TemplateType.SIMPLE">
            <summary>
            Simple Nebula Template
            </summary>
        </member>
        <member name="T:ACT.Core.Enums.Windows.TOKEN_INFORMATION_CLASS">
            <summary> 
            The TOKEN_INFORMATION_CLASS enumeration type contains values that  
            specify the type of information being assigned to or retrieved from  
            an access token. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Enums.Windows.WELL_KNOWN_SID_TYPE">
            <summary> 
            The WELL_KNOWN_SID_TYPE enumeration type is a list of commonly used  
            security identifiers (SIDs). Programs can pass these values to the  
            CreateWellKnownSid function to create a SID from this list. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Enums.Windows.SECURITY_IMPERSONATION_LEVEL">
            <summary> 
            The SECURITY_IMPERSONATION_LEVEL enumeration type contains values  
            that specify security impersonation levels. Security impersonation  
            levels govern the degree to which a server process can act on behalf  
            of a client process. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Enums.Windows.TOKEN_ELEVATION_TYPE">
            <summary> 
            The TOKEN_ELEVATION_TYPE enumeration indicates the elevation type of  
            token being queried by the GetTokenInformation function or set by  
            the SetTokenInformation function. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Enums.MouseEvents">
            <summary>
            Mouse Events (ACT Standards)
            </summary>
        </member>
        <member name="T:ACT.Core.Enums.ErrorLevel">
            <summary>
            Defines Common Error Levels.
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.ErrorLevel.Warning">
            <summary>
            Warning. Log Error. Take No Additional Action
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.ErrorLevel.Severe">
            <summary>
            Severe: Log Error, Notify Admin
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.ErrorLevel.Critical">
            <summary>
            Critical: Log Error, Notify Admin, Throw Exception
            </summary>
        </member>
        <member name="T:ACT.Core.Enums.Operators">
            <summary>
            Defines Operators that can be passed and saved as values
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.Operators.Equals">
            <summary>
            =
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.Operators.LessThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.Operators.GreaterThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:ACT.Core.Enums.Operators.Contains">
            <summary>
            Substring, % - %
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ACT.Core.Enums.Operators.WithIn" -->
        <member name="T:ACT.Core.Extensions.Byte_Array_Extensions">
            <summary>
            Byte Arary Extensions
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.Byte_Array_Extensions.ToCharArray(System.Byte[])">
            <summary>
            Converts the byte[] to a unicode char[]
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Extensions.Char_Array_Extension_Methods">
            <summary>
            Char Array Extension Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.Char_Array_Extension_Methods.GetBytes(System.Char[])">
            <summary>
            Get Bytes from the Char[]
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ACT.Core.Extensions.ExtensionsForDictionaries.ToDelimitedArray``2(System.Collections.Generic.Dictionary{``0,``1},System.String,System.String)" -->
        <member name="M:ACT.Core.Extensions.ExtensionsForDictionaries.AddUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Add Update
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="x"></param>
            <param name="checkFirst"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ExtensionsForDictionaries.AddUpdateIncrement``1(System.Collections.Generic.Dictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
            Add Update Increment
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="T:ACT.Core.Extensions.IntPtrExtensions">
            <summary>
            IntPtr Extensions
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.IntPtrExtensions.GetI32(System.IntPtr)">
            <summary>
            GetI32 Wrapper
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Extensions.ULongExtensions">
            <summary>
            ULong Extension Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.ULongExtensions.ToByteArray(System.UInt64)">
            <summary>
            Convert a ulong to a byte[]
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ACT_HASHING.GetHashCode_ulong(System.String)">
            <summary>
            Gets the HASH CODE For a String (Custom Method) 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Extensions.AESEncryption">
            <summary>
            Utility class that handles encryption
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.AESEncryption.EncryptAES(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Encrypts a string
            </summary>
            <param name="PlainText">Text to be encrypted</param>
            <param name="Password">Password to encrypt with</param>
            <param name="Salt">Salt to encrypt with</param>
            <param name="HashAlgorithm">Can be either SHA1 or MD5</param>
            <param name="PasswordIterations">Number of iterations to do</param>
            <param name="InitialVector">Needs to be 16 ASCII characters long</param>
            <param name="KeySize">Can be 128, 192, or 256</param>
            <returns>An encrypted string</returns>
        </member>
        <member name="M:ACT.Core.Extensions.AESEncryption.DecryptAES(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Decrypts a string
            </summary>
            <param name="CipherText">Text to be decrypted</param>
            <param name="Password">Password to decrypt with</param>
            <param name="Salt">Salt to decrypt with</param>
            <param name="HashAlgorithm">Can be either SHA1 or MD5</param>
            <param name="PasswordIterations">Number of iterations to do</param>
            <param name="InitialVector">Needs to be 16 ASCII characters long</param>
            <param name="KeySize">Can be 128, 192, or 256</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:ACT.Core.Extensions.ArrayExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts a byte array to a string
            </summary>
            <param name="bytes">the byte array</param>
            <returns>The string</returns>
        </member>
        <member name="T:ACT.Core.Extensions.BitBoolExtensions">
            <summary>
            The bit bool extensions.
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.BitBoolExtensions.GetBitAsBool(System.Int32,System.Int32)">
            <summary>
            Gets boolean indicating whether bit on bitShift position in bitValue integer is set or not.
            </summary>
            <param name="bitValue">
            Integer value. 
            </param>
            <param name="bitShift">
            Zero-based position of bit to get. 
            </param>
            <returns>
            Returns boolean indicating whether bit at bitShift position is set or not. 
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.BitBoolExtensions.SetBitFromBool(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets or unsets bit of bitValue integer at position specified by bitShift, depending on value parameter.
            </summary>
            <param name="bitValue">
            Integer value. 
            </param>
            <param name="bitShift">
            Zero-based position of bit to set. 
            </param>
            <param name="value">
            New boolean value of bit. 
            </param>
            <returns>
            Returns new integer value with bit at position specified by bitShift parameter set to value. 
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.BitBoolExtensions.ToHexString(System.Byte[])">
            <summary>
            The to hex string.
            </summary>
            <param name="hashedBytes">
            The hashed bytes. 
            </param>
            <returns>
            The to hex string. 
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.BitBoolExtensions.ToIntOfBits(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Creates an integer value from an array of booleans.
            </summary>
            <param name="arrayBool">
            array of boolean 
            </param>
            <returns>
            bit field of the array 
            </returns>
        </member>
        <member name="F:ACT.Core.Extensions.Byte.PlacementByte">
            <summary>   The placement byte. </summary>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.Combine(System.Byte,System.Byte)">
             <summary>   A byte extension method that combines. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="b1">   The b1 to act on. </param>
             <param name="b2">   The second byte. </param>
            
             <returns>   An int. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.CombineToUShort(System.Byte,System.Byte)">
             <summary>   A byte extension method that combine to u short. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="b1">   The b1 to act on. </param>
             <param name="b2">   The second byte. </param>
            
             <returns>   An ushort. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.CombineToInt32(System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>   A byte extension method that combine to int 32. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="b1">   The b1 to act on. </param>
             <param name="b2">   The second byte. </param>
             <param name="b3">   The third byte. </param>
             <param name="b4">   The fourth byte. </param>
            
             <returns>   An uint. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.CombineToInt64(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>   A byte extension method that combine to int 64. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="b1">   The b1 to act on. </param>
             <param name="b2">   The second byte. </param>
             <param name="b3">   The third byte. </param>
             <param name="b4">   The fourth byte. </param>
             <param name="b5">   The fifth byte. </param>
             <param name="b6">   The b 6. </param>
             <param name="b7">   The b 7. </param>
             <param name="b8">   The b 8. </param>
            
             <returns>   An ulong. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.ToACTString(System.Byte[])">
             <summary>   A byte[] extension method that converts an x to a ct string. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.FromBinaryString(System.String,System.Boolean)">
             <summary>   From binary string. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="x">            . </param>
             <param name="PadIfNeeded">  (Optional) true if pad if needed. </param>
            
             <returns>   A byte[]. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.ToBinaryString(System.Byte)">
             <summary>   A byte extension method that converts an x to a binary string. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.DropZeroBytes(System.Byte[])">
             <summary>   A byte[] extension method that drop zero bytes. </summary>
            
             <remarks>   Mark Alicz, 12/18/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   A byte[]. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Byte.CompareArrays(System.Byte[],System.Byte[])">
            <summary>
            Returns the Percentage Different From The Compare To
            </summary>
            <param name="x"></param>
            <param name="CompareTo"></param>
            <returns>Decimal Percentage Similarity 100 is Perfect Similar</returns>
        </member>
        <member name="T:ACT.Core.Extensions.DateTimeExtensions">
            <summary>
            DateTime Extension Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.DateTimeExtensions.FromUnixTime(System.UInt64)">
            <summary>
            Convert from UNIX time to Standard Time
            </summary>
            <param name="unixTime">Unix Time Seconds Since 1/1/1970 0:0:0</param>
            <returns>DateTime</returns>
            <seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:ACT.Core.Extensions.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Converts the DateTime to UNIX TIME (1/1/1970 0:0:0)
            </summary>
            <param name="date">Date to Convert</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.DateTimeExtensions.TotalSeconds(System.DateTime,System.DateTime)">
            <summary>
            Calculate total seconds from the 2 dates
            </summary>
            <param name="Date1">Date1</param>
            <param name="Date2">Date2</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.DateTimeExtensions.TotalMonths(System.DateTime,System.DateTime)">
            <summary>
            Returns the Total Number Of Months (Always Positive)
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Int Number Of Monthsnetflix</returns>
        </member>
        <member name="M:ACT.Core.Extensions.EnumType.GetStringValue(System.Enum)">
            <summary>
            Extension Method For Custom Attribute StringValue
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.EnumType.FromStringValue(System.Enum,System.String)">
            <summary>
            Reverse Operation For CustomAttribute String Value
            </summary>
            <param name="x"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.EnumType.HasStringValue(System.Enum,System.String)">
            <summary>
            String Value Custom Attribute Contains Definition Check
            </summary>
            <param name="x"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Iterates through a generic list type
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="list"> </param>
            <param name="action"> </param>
        </member>
        <member name="M:ACT.Core.Extensions.EnumerableExtensions.ForEachFirst``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Boolean})">
            <summary>
                Iterates through a list with a isFirst flag.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="list"> </param>
            <param name="action"> </param>
        </member>
        <member name="M:ACT.Core.Extensions.EnumerableExtensions.ForEachIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
                Iterates through a list with a index.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="list"> </param>
            <param name="action"> </param>
        </member>
        <member name="M:ACT.Core.Extensions.EnumerableExtensions.IfNullEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                If the <paramref name="currentEnumerable" /> is <see langword="null" /> , an Empty IEnumerable of <typeparamref
                 name="T" /> is returned, else <paramref name="currentEnumerable" /> is returned.
            </summary>
            <param name="currentEnumerable"> The current enumerable. </param>
            <typeparam name="T"> </typeparam>
            <returns> </returns>
        </member>
        <member name="M:ACT.Core.Extensions.EnumerableExtensions.Infinite``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates an infinite IEnumerable from the <paramref name="currentEnumerable" /> padding it with default( <typeparamref
                 name="T" /> ).
            </summary>
            <param name="currentEnumerable"> The current enumerable. </param>
            <typeparam name="T"> </typeparam>
            <returns> </returns>
        </member>
        <member name="M:ACT.Core.Extensions.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts an <see cref="!:IEnumerable" /> to a HashSet -- similar to ToList()
            </summary>
            <param name="list"> The list. </param>
            <typeparam name="T"> </typeparam>
            <returns> </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ACT.Core.Extensions.Generic.XmlSerialize``1(``0)">
            <summary>Serializes an object of type T in to an xml string</summary>
            <typeparam name="T">Any class type</typeparam>
            <param name="obj">Object to serialize</param>
            <returns>A string that represents Xml, empty otherwise</returns>
        </member>
        <member name="M:ACT.Core.Extensions.Generic.XmlDeserialize``1(System.String)">
            <summary>Deserializes an xml string in to an object of Type T</summary>
            <typeparam name="T">Any class type</typeparam>
            <param name="xml">Xml as string to deserialize from</param>
            <returns>A new object of type T is successful, null if failed</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ACT.Core.Extensions.Generic.Clone``1(``0)" -->
        <member name="F:ACT.Core.Extensions.Integer.BitPositions">
            <summary>
            Bit Positions (Factors of 2)
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.IsSingleBit(System.Int32)">
             <summary>   An int extension method that query if 'x' is single bit. </summary>
            
             <remarks>   Mark Alicz, 7/10/2016. </remarks>
            
             <param name="x">    The x to act on. </param>
            
             <returns>   true if single bit, false if not. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.GetPreviousPowerOfTwo(System.Int32)">
             <summary>   An int extension method that gets the previous power of two. </summary>
            
             <remarks>   Mark Alicz, 7/10/2016. </remarks>
            
             <param name="x">    The x to act on. </param>
            
             <returns>   The previous power of two. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.GetNextPowerOfTwo(System.Int32)">
             <summary>   An int extension method that gets the next power of two. </summary>
            
             <remarks>   Mark Alicz, 7/10/2016. </remarks>
            
             <param name="x">    The x to act on. </param>
            
             <returns>   The next power of two. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.IsPowerOfTwo(System.Int32)">
             <summary>   An int extension method that query if 'x' is power of two. </summary>
            
             <remarks>   Mark Alicz, 7/10/2016. </remarks>
            
             <param name="x">    The x to act on. </param>
            
             <returns>   true if power of two, false if not. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.GetExcelColumnName(System.Int32)">
             <summary>   An int extension method that gets excel column name. A, B, AA, ZZ Etc. </summary>
            
             <remarks>   Mark Alicz, 7/10/2016. </remarks>
            
             <param name="columnNumber"> The columnNumber to act on. </param>
            
             <returns>   The excel column name. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.ToFileSize(System.Int32)">
            <summary>
            To File Size String
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.Integer.ToFileSize(System.Int64)">
            <summary>
            To File Size String
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ObjectExtensions.FirstOrDefaultFromMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Predicate{``0})">
             <summary>
             An IEnumerable&lt;T&gt; extension method that first or default from many.
             </summary>
            
             <remarks>   Mark Alicz, 10/28/2016. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="source">           The source to act on. </param>
             <param name="childrenSelector"> The children selector. </param>
             <param name="condition">        The condition. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SecureStringExtensions.ToByteArray(System.Security.SecureString,System.Text.Encoding)">
             <summary>
             A SecureString extension method that converts this object to a byte array.
             </summary>
            
             <remarks>   Mark Alicz, 12/17/2016. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="secureString"> The secureString to act on. </param>
             <param name="encoding">     (Optional) the encoding. </param>
            
             <returns>   The given data converted to a byte[]. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SecureStringExtensions.ConvertToUnsecureString(System.Security.SecureString)">
             <summary>
             A SecureString extension method that converts a securePassword to an unsecure string.
             </summary>
            
             <remarks>   Mark Alicz, 12/17/2016. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="securePassword">   The securePassword to act on. </param>
            
             <returns>   The given data converted to an unsecure string. </returns>
        </member>
        <member name="T:ACT.Core.Extensions.SystemTypes">
             <summary>   A system types. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Contains(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Searches the string X for any instance of the List of Strings
            </summary>
            <param name="x"></param>
            <param name="SearchStrings"></param>
            <param name="IgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Searches the string X for any instance of the List of Strings
            </summary>
            <param name="x"></param>
            <param name="SearchString"></param>
            <param name="IgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Contains(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Searches the string X for any instance of the List of Strings
            </summary>
            <param name="x"></param>
            <param name="SearchString"></param>
            <param name="IgnoreCase"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ACT.Core.Extensions.SystemTypes.EscapeFileName(System.String,System.String)" -->
        <member name="F:ACT.Core.Extensions.SystemTypes.UriRfc3986CharsToEscape">
            <summary>
            The set of characters that are unreserved in RFC 2396 but are NOT unreserved in RFC 3986.
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.EscapeUriDataStringRfc3986(System.String)">
             <summary>   Escapes a string according to the URI data string rules given in RFC 3986. </summary>
            
             <remarks>
             The <see cref="M:System.Uri.EscapeDataString(System.String)"/> method is <i>supposed</i> to take on RFC 3986 behavior
             if certain elements are present in a .config file.  Even if this actually worked (which in my
             experiments it <i>doesn't</i>), we can't rely on every host actually having this
             configuration element present.
             </remarks>
            
             <param name="value">    The value to escape. </param>
            
             <returns>   The escaped value. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToString(System.String,System.Boolean)">
             <summary>   To String Overload Convert Null To Empty String. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">                        string To Convert. </param>
             <param name="ConvertNullToEmptyString"> True/False Convert Null To Empty String. </param>
            
             <returns>   A string that represents this object. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToUTF8(System.String)">
             <summary>   Converts The String To UTF 8 Format. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    String To Convert. </param>
            
             <returns>   UTF 8 String. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.URLEncode(System.String,System.Boolean)">
             <summary>   URL Encode The String. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">                String To URL Encode. </param>
             <param name="UseDataMethod">    (Optional) Use Data Method (EscapeDataString) VS
                                             (EscapeUriString) </param>
            
             <returns>   URL Encoded String. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.URLDecode(System.String)">
            <summary>
            Decodes a URL Encoded String
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.EnsureStartsWith(System.String,System.String)">
            <summary>   A string extension method that ensures that starts with. </summary>
            <remarks>   Mark Alicz, 9/8/2019. </remarks>
            <param name="x">    string To Convert. </param>
            <param name="Start">  The end. </param>
            <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.EnsureEndsWith(System.String,System.String)">
             <summary>   A string extension method that ensures that ends with. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
             <param name="End">  The end. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.EndsWith(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Checks the string to make sure the string ends with one of the specified options 
            </summary>
            <param name="x"></param>
            <param name="Options"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToBool(System.String,System.Boolean)">
             <summary>   Tests The Value Returns True/False Depending on Match. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">        . </param>
             <param name="Default">  (Optional) </param>
            
             <returns>   The given data converted to a bool. </returns>
            
             ### <param name="CaseSensitive">    . </param>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TestToBool(System.String,System.String,System.Boolean)">
             <summary>   Tests The Value Returns True/False Depending on Match. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">                . </param>
             <param name="TestCaseYes">      . </param>
             <param name="CaseSensitive">    (Optional) </param>
            
             <returns>   true if the test passes, false if the test fails. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TryToDateTime(System.String)">
             <summary>   Converts A String To A DateTime.  If Error Returns Null. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   DateTime or Null. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.NormalizeForSQLServer(System.String)">
             <summary>
             Normalize A String Value For SQL Server.  Used Specifically For Non Parameterized SQL
             Queries.  i.e. Values of Insert Statements Also Attempts To Remove Any SQL Injections
             Attempts.
             </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    String To Normalize. </param>
            
             <returns>   Normalized String. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TryToInt(System.String)">
             <summary>   Converts A String To A Int.  If Error Returns Null. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   Int or Null. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TryToGuid(System.String)">
             <summary>   Converts a string to a Guid. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   Guid or Null. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TryToDecimal(System.String)">
             <summary>   Converts A String To A Decimal.  If Error Returns Null. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   Decimal or Null. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TryToDouble(System.String)">
             <summary>   Converts A String To A Decimal.  If Error Returns Null. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   Decimal or Null. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Format_To_Money(System.String)">
             <summary>   A string extension method that format to money. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   The formatted to money. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.GetString(System.Byte[])">
             <summary>   A byte[] extension method that gets a string. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="buffer">   The buffer to act on. </param>
            
             <returns>   The string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Return_GetWebRequest(System.String,System.Net.WebProxy)">
             <summary>   A string extension method that returns get web request. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="URL">              The URL to act on. </param>
             <param name="OptionalProxy">    (Optional) the optional proxy. </param>
            
             <returns>   The get web request. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.CreateNiceSpacedTextFromSingleTextCapitals(System.String)">
             <summary>
             A string extension method that creates nice spaced text from single text capitals.
             </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="val">  The val to act on. </param>
            
             <returns>   The new nice spaced text from single text capitals. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.StringBetween(System.String,System.String,System.String)">
             <summary>   A string extension method that string between. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">        string To Convert. </param>
             <param name="Start">    The start. </param>
             <param name="End">      The end. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.FromBase64String(System.String)">
            <summary>
            Converts a byte array to a string
            </summary>
            <param name="bytes">the byte array</param>
            <returns>The string</returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Replace(System.String,System.String,System.String,System.StringComparison)">
             <summary>
             Replace Extension (Child) Accepts Comma Seperated Strings as Parameters for the Lazy People.
             </summary>
            
             <remarks>   Mark Alicz, 11/24/2016. </remarks>
            
             <param name="str">                          The str to act on. </param>
             <param name="replaceCommaSeperated">        The replace comma seperated. </param>
             <param name="replacewithCommaSeperated">    The replacewith comma seperated. </param>
             <param name="comparison">                   The comparison method. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Replace(System.String,System.String[],System.String[],System.StringComparison)">
             <summary>   A string extension method that replaces strings. </summary>
            
             <remarks>   Mark Alicz, 11/24/2016. </remarks>
            
             <param name="str">          The str to act on. </param>
             <param name="replace">      The Old Value strings string[]. </param>
             <param name="replacewith">  The New Value strings string[]. </param>
             <param name="comparison">   The comparison method. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.RemoveScriptTags(System.String)">
             <summary>   A string extension method that removes the script tags described by x. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToJSON(System.String)">
             <summary>   A string extension method that converts an x to a JSON. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a dynamic. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.JSONToDataTable(System.String)">
             <summary>   A string extension method that JSON to data table. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   A DataTable. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToBase64(System.String)">
             <summary>   A string extension method that converts an x to a base 64. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToBase16(System.String)">
             <summary>   A string extension method that converts an x to a base 16. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToBaseACTString(System.String)">
             <summary>   A string extension method that converts an x to a ACT 16. </summary>
            
             <remarks>   Mark Alicz, 5/8/2018. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.FromBase64(System.String)">
             <summary>
             A string extension method that initializes this object from the given from base 64.
             </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.FromBase16(System.String)">
             <summary>
             A string extension method that initializes this object from the given from base 16.
             </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToSHA512(System.String)">
             <summary>   A string extension method that converts an x to a sha 512. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToMD5(System.String)">
             <summary>   A string extension method that converts an x to a md 5. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToMD5ALT(System.String)">
             <summary>   A string extension method that converts an x to a md 5 a lt. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToInvariantString(System.String)">
             <summary>   A string extension method that converts an x to an invariant string. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToIntFast(System.String)">
             <summary>   A string extension method that converts an x to an int fast. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   x as an int. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToInt(System.String)">
             <summary>   A string extension method that converts this object to an int. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   The given data converted to an int. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToLong(System.String)">
             <summary>   A string extension method that converts this object to a long. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   The given data converted to a long. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToInt(System.String,System.Int32)">
             <summary>   A string extension method that converts this object to an int. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="ErrorValue">   The error value Date/Time. </param>
            
             <returns>   The given data converted to an int. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToLong(System.String,System.Int64)">
             <summary>   A string extension method that converts this object to a long. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="ErrorValue">   The error value Date/Time. </param>
            
             <returns>   The given data converted to a long. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToDecimal(System.String,System.Decimal)">
             <summary>   A string extension method that converts this object to a decimal. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="ErrorValue">   The error value Date/Time. </param>
            
             <returns>   The given data converted to a decimal. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToDateTime(System.String)">
             <summary>   A string extension method that converts this object to a date time. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   The given data converted to a DateTime. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToDateTime(System.String,System.DateTime)">
             <summary>   A string extension method that converts this object to a date time. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="ErrorValue">   The error value Date/Time. </param>
            
             <returns>   The given data converted to a DateTime. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.EscapeSpecCharsForJS(System.String)">
             <summary>   A string extension method that escape specifier characters for js. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    string To Convert. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.NullOrEmpty(System.String)">
             <summary>   A string extension method that null or empty. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.EnsureInt(System.String,System.Boolean)">
             <summary>   A string extension method that ensures that int. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">        . </param>
             <param name="SetNull">  true to set null. </param>
            
             <returns>   An int? </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.SplitString(System.String,System.String,System.StringSplitOptions)">
             <summary>   A string extension method that splits a string. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="Delimeter">    The delimeter. </param>
             <param name="o">            The StringSplitOptions to process. </param>
            
             <returns>   A string[]. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TrimStart(System.String,System.String)">
             <summary>   A string extension method that trim start. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="Characters">   The characters. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.TrimEnd(System.String,System.String)">
             <summary>   A string extension method that trim end. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="Characters">   The characters. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Trim(System.String,System.String)">
             <summary>   A string extension method that trims. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">            string To Convert. </param>
             <param name="Characters">   The characters. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Left(System.String,System.Int32)">
             <summary>   A string extension method that lefts. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">        string To Convert. </param>
             <param name="Length">   The length. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.Right(System.String,System.Int32)">
             <summary>   A string extension method that rights. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">        string To Convert. </param>
             <param name="Length">   The length. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToDbType(System.String)">
             <summary>   A string extension method that converts a DBType to a database type. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="DBType">   The DBType to act on. </param>
            
             <returns>   DBType as a System.Data.DbType. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ToDictionaryFromFormattedXML(System.String)">
             <summary>   Turns An XML String Into A Dictionary. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    . </param>
            
             <returns>   x as a Dictionary&lt;string,string&gt; </returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemTypes.ParseWeb_Page_Name(System.String)">
             <summary>   A string extension method that parse web page name. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="SCRIPTNAME">   The SCRIPTNAME to act on. </param>
            
             <returns>   A string. </returns>
        </member>
        <member name="T:ACT.Core.Extensions.CodeGenerator.CodeGeneration">
             <summary>
             This is Needed In Order To Allow The Code Generation to Create Valid C# Formatted Characters.
             </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
        </member>
        <member name="F:ACT.Core.Extensions.CodeGenerator.CodeGeneration.__ReservedKeywords">
            <summary>   The reserved keywords. </summary>
        </member>
        <member name="M:ACT.Core.Extensions.CodeGenerator.CodeGeneration.ToCSharpFriendlyName(System.String)">
             <summary>   A string extension method that converts an x to a C# friendly name. </summary>
            
             <remarks>   Mark Alicz, 12/8/2016. </remarks>
            
             <param name="x">    The x to act on. </param>
            
             <returns>   x as a string. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ParseHTTP_URL(System.String)">
            <summary>
            Parse HTTP URL
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ComputeStringDifference(System.String,System.String)">
            <summary>
                Compute the distance between two strings.
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.IsValidPhoneNumber(System.String)">
            <summary>
                Checks the string for a valid Phone Number Format
            </summary>
            <param name="Phone"></param>
            <returns>bool:true or false</returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.IsValidEmail(System.String)">
            <summary>
            Checks for a Valid Email
            </summary>
            <param name="strIn"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.IsComplex(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks for Password Complexity
            </summary>
            <param name="pwd">Self Ref Password To check</param>
            <param name="minLength">Default 8</param>
            <param name="numUpper">Upper Case Count - Default 1</param>
            <param name="numLower">Lower Case Count - Default 1</param>
            <param name="numNumbers">Number Count - Default 0</param>
            <param name="numSpecial">Special Character Count - Default 1</param>
            <returns>bool:true or false</returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ToJsString(System.String)">
            <summary>
                Converts a string to an escaped JavaString string.
            </summary>
            <param name="str">The string.</param>
            <returns>
                The JS string.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.AreAnyWordsOverMaxLength(System.String,System.Int32)">
            <summary>
                Function to check a max word length, used i.e. in topic names.
            </summary>
            <param name="text">
                The raw string to format
            </param>
            <param name="maxWordLength">
                The max Word Length.
            </param>
            <returns>
                The formatted string
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.TrimWordsOverMaxLengthWordsPreserved(System.String,System.Int32)">
            <summary>
                Function to remove words in a string based on a max string length, used i.e. in search.
            </summary>
            <param name="text">
                The raw string to format
            </param>
            <param name="maxStringLength">
                The max string length.
            </param>
            <returns>
                The formatted string
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.FastIndexOf(System.String,System.String)">
            <summary>
                Fast index of.
            </summary>
            <param name="source">The source.</param>
            <param name="pattern">The pattern.</param>
            <returns>
                The fast index of.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ForEachChar(System.String,System.Action{System.Char})">
            <summary>
                Does an action for each character in the input string. Kind of useless, but in a
                useful way. ;)
            </summary>
            <param name="input">The input.</param>
            <param name="forEachAction">For each action.</param>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
                Formats a string with the provided parameters
            </summary>
            <param name="s">
                The s.
            </param>
            <param name="args">
                The args.
            </param>
            <returns>
                The formatted string
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.GetNewNoEmptyStrings(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Removes empty strings from the list
            </summary>
            <param name="inputList">The input list.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputList" /> is <c>null</c>.</exception>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.GetNewNoSmallStrings(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
                Removes strings that are smaller then <paramref name="minSize" />
            </summary>
            <param name="inputList">The input list.</param>
            <param name="minSize">The minimum size.</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.IsNotSet(System.String)">
            <summary>
                When the string is trimmed, is it <see langword="null" /> or empty?
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
                The is <see langword="null" /> or empty trimmed.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.IsSet(System.String)">
            <summary>
                When the string is trimmed, is it <see langword="null" /> or empty?
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
                The is <see langword="null" /> or empty trimmed.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.RemoveMultipleSingleQuotes(System.String)">
            <summary>
                Removes multiple single quote ' characters from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>
                The remove multiple single quotes.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.RemoveMultipleWhitespace(System.String)">
            <summary>
                Removes multiple whitespace characters from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>
                The remove multiple whitespace.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.StringToHexBytes(System.String)">
            <summary>
                Converts a string into it's hexadecimal representation.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
                The string to hex bytes.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.StringToList(System.String,System.Char)">
            <summary>
                Converts a string to a list using delimiter.
            </summary>
            <param name="str">
                starting string
            </param>
            <param name="delimiter">
                value that delineates the string
            </param>
            <returns>
                list of strings
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.StringToList(System.String,System.Char,System.Collections.Generic.List{System.String})">
            <summary>
                Converts a string to a list using delimiter.
            </summary>
            <param name="str">
                starting string
            </param>
            <param name="delimiter">
                value that delineates the string
            </param>
            <param name="exclude">
                items to exclude from list
            </param>
            <returns>
                list of strings
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Creates a delimited string an enumerable list of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objList">The object list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>
                The list to string.
            </returns>
            <exception cref="T:System.ArgumentNullException">objList;objList is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="objList" /> is <c>null</c>.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ACT.Core.Extensions.StringExtensions.ToJsonArray(System.Collections.Generic.List{System.String})" -->
        <member name="M:ACT.Core.Extensions.StringExtensions.ToRegExString(System.String)">
            <summary>
                Cleans a string into a proper RegEx statement.
                E.g. "[b]Whatever[/b]" will be converted to:
                "\[b\]Whatever\[\/b\]"
            </summary>
            <param name="input">
            </param>
            <returns>
                The to reg ex string.
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
                Truncates a string with the specified limits and adds (...) to the end if truncated
            </summary>
            <param name="input">
                input string
            </param>
            <param name="limit">
                max size of string
            </param>
            <returns>
                truncated string
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.TruncateMiddle(System.String,System.Int32)">
            <summary>
                Truncates a string with the specified limits by adding (...) to the middle
            </summary>
            <param name="input">
                input string
            </param>
            <param name="limit">
                max size of string
            </param>
            <returns>
                truncated string
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ToMd5Hash(System.String)">
            <summary>
                Convert a input string to a byte array and compute the hash.
            </summary>
            <param name="value">Input string.</param>
            <returns>The Hexadecimal string.</returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.ToBytes(System.String)">
            <summary>
                Convert a input string to a byte array
            </summary>
            <param name="value">Input string.</param>
            <returns>The Byte String</returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.FromACTString(System.String)">
            <summary>
                A string extension method that initializes this object from the given from a ct string.
            </summary>
            <remarks>   Mark Alicz, 12/18/2016. </remarks>
            <param name="x">    . </param>
            <returns>   A byte[]. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringExtensions.GenerateStreamFromString(System.String)">
            <summary>
            Generates The Stream From a String
            </summary>
            <param name="s">String To Convert To A Stream</param>
            <returns>Stream</returns>
        </member>
        <member name="T:ACT.Core.Extensions.StringGraphics">
            <summary>
            String Graphic Functions
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.StringGraphics.ToRectangle(System.String)">
            <summary>
            CSV string to Rectangle (4 Parts) i.e. 4,4,4,4
            </summary>
            <param name="x">string </param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringParserExtensions.ParseOutString(System.String,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Parse Out the String
            </summary>
            <param name="DelimitedString"></param>
            <param name="ElementPosition"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Extensions.StringPatterns">
            <summary>
            Pattern Recognition String Extension Methods
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ACT.Core.Extensions.StringPatterns.Patterns_GetCommonStart(System.Collections.Generic.List{System.String},System.String,System.Boolean)" -->
        <member name="M:ACT.Core.Extensions.StringPatterns.Patterns_GetUniqueMinusCommon(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Get Unique Items based on the Data and Common Element
            </summary>
            <param name="Data"></param>
            <param name="CommonElement"></param>
            <param name="IsPath"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.StringPatterns.IsValidRegularExpression(System.String)">
            <summary>
            Validates a Regular Expression Pattern
            </summary>
            <param name="RegX">REGEX Pattern to Validate</param>
            <returns>True/False</returns>
        </member>
        <member name="T:ACT.Core.Extensions.String_FileIO">
            <summary>
            String FILE IO Extension Class
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.ReadAllText(System.String)">
            <summary>
            Reads all the text from the File Path
            </summary>
            <param name="FilePath"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.CopyFile_Passivly(System.String,System.String,System.IProgress{System.ValueTuple{System.Int64,System.TimeSpan}})">
            <summary>
            Tries to copy a file from one location to another using a FileShare.ReadWrite operation.
            On error the length is 0 and the TimeSpan is set to MAX.  Errors are logged when VerboseDebugging = true;
            </summary>
            <param name="SourceFilePath">Source File Path</param>
            <param name="DestinationFilePath">Destination File Path</param>
            <param name="progress">Progress Info</param>
            <returns>(long, TimeSpan) or (TotalBytesWritten,Time To Do It)</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.CalculateDirectorySize(System.String)">
            <summary>
            Calculate the Directory Size Using a Parallel Loop
            </summary>
            <param name="SourcePath">Directory Path To Calculate</param>
            <returns>(int Count, long TotalSize)</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.SaveAllText(System.String,System.String)">
            <summary>
            Reads all the text from the File Path
            </summary>
            <param name="FilePath"></param>
            <param name="FileData"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.CopyFilesRecursively(System.String,System.String)">
            <summary>
            Copys All The Files From The Source To The Destination
            </summary>
            <param name="SourceDir">Source Directory</param>
            <param name="DestinationDir">Destination Directory</param>
            <returns>Total Files Copied</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.CopyFilesRecursively(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Eventually Move This To ACT Foo
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.DeleteFile(System.String,System.Int32)">
             <summary>
             Attempts To Delete A File.  Waits For It To Complete.  Throws Error On Lock or Other Issue.
             </summary>
            
             <remarks>   Mark Alicz, 12/17/2016. </remarks>
            
             <param name="FileToDelete"> Full File Path To Delete. </param>
             <param name="MaxWaitTime">  (Optional) the maximum wait time. </param>
            
             <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.DeleteAllFilesFromDirectory(System.String,System.Boolean)">
            <summary>
            Delete All Files From Directory Optionally Recursive 
            </summary>
            <param name="Directory"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO._getallfilesfrompath(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Internal get All Files From Path
            </summary>
            <param name="BaseDirectory"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.GetAllFilesFromPath(System.String,System.Boolean)">
            <summary>
            Get All Files From Base Directory
            </summary>
            <param name="BaseDirectory">Base Directory</param>
            <param name="Recursive">Get Files In Sub Folders</param>
            <returns>List{string} All Files Found</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.DeleteFile(System.String,System.Int16,System.Boolean)">
             <summary>
             Attempts To Delete A File.  Waits For It To Complete.  Throws Error On Lock or Other Issue.
             </summary>
            
             <remarks>   Mark Alicz, 12/17/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="FileToDelete"> Full File Path To Delete. </param>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.GetFileSize(System.String)">
            <summary>
            File Size
            </summary>
            <param name="FileName"></param>
            <returns>-1 File Doesnt Exist, -2 Other General Error</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.FindFileReturnPath(System.String,System.String,System.Boolean)">
            <summary>
            FindFile and return the Path Optionally Searches Sub Folder
            </summary>
            <param name="path">Path to Start In</param>
            <param name="fileName">Name Of The File</param>
            <param name="searchSubFolders">Search Sub Folders Or Not</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.FindAllFileReferencesInPath(System.String,System.String,System.Boolean)">
            <summary>
            Searches for all references of the specified file
            </summary>
            <param name="path"></param>
            <param name="filename"></param>
            <param name="searchSubFolders"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_FileIO.GetMemoryStream(System.String)">
            <summary>
            Get a Memory Stream From a File Path
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.ToStream(System.String)">
            <summary>
            Converts a String to a MemoryStream.
            </summary>
            <param name="str">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.IsImageName(System.String)">
            <summary>
            Determines whether [is image name] [the specified input string].
            </summary>
            <param name="inputString">The input string.</param>
            <returns>Returns if the String is a Image Name</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.GetFileName(System.String,System.Boolean)">
            <summary>
            Gets A File Name From A Full Path Name
            </summary>
            <param name="x">full Path</param>
            <param name="includeExtension">Include Or Exclude The Extension</param>
            <returns>string - File Name</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.EnsureValidWindowsFileName(System.String,System.String)">
            <summary>
            Ensures the FileName passed in is Valid
            </summary>
            <param name="x">Either A Full Path To The FileName or The FileName ItSelf</param>
            <param name="ReplaceMentCharacter">Replacement Character to Replace</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.FileExists(System.String)">
            <summary>
            Checks to see if the File Exists
            </summary>
            <param name="x">Full Path Name To File.  i.e. c:\test\test.txt</param>
            <returns>true / false</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.FileExists(System.String,System.String)">
            <summary>
            Checks If The File Exists.
            </summary>
            <param name="DirectoryPath">Directory To The File</param>
            <param name="FileName">Actual File Name</param>
            <returns>true / false</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.NavigateUpDirectory(System.String,System.Int32,System.Boolean)">
            <summary>
            Moves Up a Directory [Count] Directories. 
            </summary>
            <param name="StartingDirectoryPath">Starting Directory</param>
            <param name="Count">Number Of Parents Up To Navigate To</param>
            <param name="Validate">Validate The Information - throwing and error</param>
            <returns>New Directory Path</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.DirectoryExists(System.String,System.Boolean)">
            <summary>
            Checks To See if the Directory Exists,  Optional Parameter To Create If It Doesnt
            </summary>
            <param name="DirectoryPath">Directory Path</param>
            <param name="ForceCreate">Create The Directory when It is not found</param>
            <returns>True On Success, False On Failure</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.DirectoryExists(System.String)">
            <summary>
            Checks If The Directory Exists
            </summary>
            <param name="x">Directory Path</param>
            <returns>true / false</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.CreateDirectoryStructure(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Create The Directory Structure Specified In The Parameter
            </summary>
            <param name="x">Directory Structure To Create</param>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.EnsureDirectoryFormat(System.String,System.Boolean)">
            <summary>
            Ensures The String Ends With \.  i.e. "c:\test\testdir" -> "c:\test\testdir\"
            </summary>
            <param name="x">Directory Path</param>
            <returns>Formatted Directory Path</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.GetDirectoryFromFileLocation(System.String)">
            <summary>
            Returns the Directory Path From The Full FileName Path
            </summary>
            <param name="x">Directory With File Name</param>
            <returns>Directory Part Of The Full Path</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.GetDirectoryName(System.String)">
            <summary>
            Gets the Last Directory Name From A Valid Directory Path
            </summary>
            <param name="x">Valid Directory Name</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.FormatDirectory(System.String)">
            <summary>
            Depreciated Use EnsureDirectoryFormat()
            </summary>
            <param name="x"></param>
            <returns></returns>        
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the File Name Without The Extension From a Full File Path
            </summary>
            <param name="x"></param>
            <returns>File Name - With No Extensions</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.GetFileNameFromFullPath(System.String)">
            <summary>
            Returns the File Name From The Full File Path (Includes Network Paths)
            </summary>
            <param name="x">Full File Path</param>
            <returns>FileName With Extension</returns>
        </member>
        <member name="M:ACT.Core.Extensions.String_IO.GetExtensionFromFileName(System.String)">
            <summary>
            Returns the Extension From The FileName
            </summary>
            <param name="x">FileName</param>
            <returns>File Extension - Without the Period</returns>
        </member>
        <member name="T:ACT.Core.Extensions.ExtensionsForLists">
            <summary>
            Extensions for List objects
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.ExtensionsForLists.ToDelimitedArray``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Convert The List T To a String
            </summary>
            <typeparam name="T">Type Of List Objects</typeparam>
            <param name="x">List To Convert</param>
            <param name="Delimiter">Delimieter To Use</param>
            <returns>A Delimited String.  I.e. listfirstobject,listsecondobject   DOES NOT CHECK FOR VALID DELIMETERS YOU NEED TO ENSURE THAT YOU PASS IN A UNIQUE DELIMETER</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ACT.Core.Extensions.ExtensionsForLists.Clone``1(System.Collections.Generic.IList{``0})" -->
        <member name="M:ACT.Core.Extensions.ExtensionsForLists.ReduceToLeastCommon(System.Collections.Generic.List{System.String})">
            <summary>
            Taks a List. (i.E of Directories) and minifies them to remove the most common string in all.
            </summary>
            <param name="listToMinify"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ExtensionsForLists.SortWithNull``1(System.Collections.Generic.List{``0},System.Boolean,System.String)">
            <summary>
            Sort the List with Nulls
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listToSort"></param>
            <param name="Asc"></param>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.DataTableExtensions.ToExcelFile(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Datatable To Excel File (xlsx ONLY)
            </summary>
            <param name="x"></param>
            <param name="CreateHeaderRows"></param>        
        </member>
        <member name="M:ACT.Core.Extensions.DataExtensions.ToSQLDataType(System.Data.DbType)">
            <summary>
            Converts a System.Data.DbType to a System.Data.SqlDbType
            </summary>
            <param name="DBType">In DBType</param>
            <returns>System.Data.SqlDbType</returns>
        </member>
        <member name="M:ACT.Core.Extensions.DataExtensions.ToDBStringCustom(System.Data.DbType)">
            <summary>
            Converts DbType to String
            </summary>
            <param name="DBType">DBType</param>
            <returns>LowerCase String</returns>
        </member>
        <member name="M:ACT.Core.Extensions.DataExtensions.ToCSharpString(System.Data.DbType)">
            <summary>
            Converts DbType to String
            </summary>
            <param name="DBType">DBType</param>
            <returns>LowerCase String</returns>
        </member>
        <member name="M:ACT.Core.Extensions.DataExtensions.ToCSharpStringNullable(System.Data.DbType)">
            <summary>
            Converts DbType to Nullable String
            </summary>
            <param name="DBType">DBType</param>
            <returns>LowerCase String</returns>
        </member>
        <member name="M:ACT.Core.Extensions.DataExtensions.IsStringType(System.Data.DbType)">
            <summary>
            
            </summary>
            <param name="DBType"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Extensions.SystemDrawingColorExtensions">
             <summary>   Holds Extension Methods For System.Drawing.Color objects. </summary>
            
             <remarks>   Mark Alicz, 11/22/2016. </remarks>
        </member>
        <member name="M:ACT.Core.Extensions.SystemDrawingColorExtensions.ToHexString(System.Drawing.Color)">
             <summary>
             A System.Drawing.Color extension method that converts a c to a hexadecimal string.
             </summary>
            
             <remarks>   Mark Alicz, 11/22/2016. </remarks>
            
             <param name="c">    The Color to process. </param>
            
             <returns>Hex Value Of the Color.</returns>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.ToBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Get the Base64 String That Represents an Image <see cref="T:System.Drawing.Image"/>
            </summary>
            <param name="image"><see cref="T:System.Drawing.Image"/> To Convert</param>
            <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat"/> Image Format to Save the Base64 Image As</param>
            <returns>Base 64 String: <see cref="T:System.String"/></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.ConvertBase64ToImage(System.String)">
            <summary>
            Convert a Base64 Image String to a System.Drawing.Image
            </summary>
            <param name="ImgBase64">Base 64 Encoded Image</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.ConvertToFormat(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Convert The Image To a New Format
            </summary>
            <param name="theImage"></param>
            <param name="NewFormat"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.SaveImageToLocation(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save The Image To Location
            </summary>
            <param name="theImage"></param>
            <param name="saveLocation"></param>
            <param name="NewFormat"></param>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.saveImageToLocation(System.Drawing.Image,System.String)">
            <summary>
            Saves the image to specific location, save location includes filename
            </summary>
            <param name="theImage"></param>
            <param name="saveLocation"></param>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.ResizeAndSave(System.Drawing.Image,System.Int32,System.Boolean,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Resize The Image and Save IT
            </summary>
            <param name="ImageToResize"></param>
            <param name="MaxWidth"></param>
            <param name="UseHeightRatio"></param>
            <param name="FileName"></param>
            <param name="NewFormat"></param>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.convertToBlackAndWhite(System.Drawing.Bitmap,System.Single)">
            <summary>
            Convert the Image To Black And White
            </summary>
            <param name="image"></param>
            <param name="Threshold"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.ImageExtensions.ApplyInvert(System.Drawing.Bitmap)">
            <summary>
            Invert An Images Colors
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemDrawingSizeExtensions.FromString(System.Drawing.Size,System.String)">
            <summary>
            Returns a Size Object From A Formatted String Object
            String Format Is {Width=100,Height=100}
            </summary>
            <param name="x">SizeObject</param>
            <param name="Value">String</param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Extensions.SystemIOStreamExtensions">
            <summary>
            SystemIO Stream Extensions
            </summary>
        </member>
        <member name="M:ACT.Core.Extensions.SystemIOStreamExtensions.ConvertToString(System.IO.MemoryStream)">
            <summary>
            Converts A Memory Stream To String
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemIOStreamExtensions.ToMemoryStream(System.IO.Stream)">
            <summary>
            Converts A Normal Stream to a MemoryStream
            </summary>
            <param name="MainStream"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.SystemIOStreamExtensions.GetSHA512Hash(System.IO.Stream)">
            <summary>
            Calculated the SHA512 Hash
            </summary>
            <param name="s">Stream to Get the HASH For</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.UInteger.ToBinary(System.UInt32)">
            <summary>
            Convert to Binary String
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Extensions.UInteger.ToByteArray(System.UInt32)">
            <summary>
            Converts a <code>uint</code> value to a <code>byte[]</code>.
            </summary>
            <param name="value">The <code>uint</code> value to convert.</param>
            <returns>A <code>byte[]</code> representing the <code>uint</code> value.</returns>
        </member>
        <member name="T:ACT.Core.Types.IO.ACTBinaryReader">
            <summary>
            ACT Binary Reader - Fixes the Endian Issue
            </summary>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.ReadInt32">
            <summary>
            Read an Int32
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.ReadInt16">
            <summary>
            Read an Int16
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.ReadInt64">
            <summary>
            Read an Int64
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.ReadUInt16">
            <summary>
            Read a UInt32
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.ReadUInt32">
            <summary>
            Read a UInt32
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Types.IO.ACTBinaryReader.ReadUInt64">
            <summary>
            Read a UInt32
            </summary>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Types.ACTAction.ActActions">
            <summary>
            Container class holding all of the Actions
            </summary>
        </member>
        <member name="M:ACT.Core.Types.ACTAction.ActActions.ToJson">
            <summary>
            Converts this object to JSON
            </summary>
            <returns></returns>
        </member>
        <member name="F:ACT.Core.Types.ACTAction.ActActions.JSONSettings">
            <summary>
            custom Converter Settings
            </summary>
        </member>
        <member name="M:ACT.Core.Types.ACTAction.ActActions.FromJson(System.String)">
            <summary>
            Returns the Actions From a string.
            </summary>
            <param name="json">JSON Data</param>
            <returns>ACTActions Object</returns>
        </member>
        <member name="M:ACT.Core.Types.ACTAction.ActActions.FromFile(System.String,System.Boolean,System.String)">
            <summary>
            Returns the Actions From a File.  Decrypts the data if needed
            </summary>
            <param name="fileName">JSON File Containing the Action JSON Data</param>
            <param name="Encrypted">True/False if the JSON File is Encrypted</param>
            <param name="Password">Optional Password - Default uses internal encryption</param>
            <returns>ACTActions Object</returns>
        </member>
        <member name="T:ACT.Core.Types.ACTAction.Action">
            <summary>
            Single Action Specification
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTAction.Argument">
            <summary>
            Single Action Argument
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.ApplicationLibrary">
            <summary>
            Application Library Class Holds all the items
            </summary>
        </member>
        <member name="F:ACT.Core.Types.ACTStudio.ApplicationLibrary.ApplicationLibrary.ApplicationLibraryManagerSettings">
            <summary>
            Application JSON Settings
            </summary>
        </member>
        <member name="F:ACT.Core.Types.ACTStudio.ApplicationLibrary.ApplicationLibrary.ConfigurationRequirements">
            <summary>
            List of the Configuration Requirements
            </summary>
        </member>
        <member name="M:ACT.Core.Types.ACTStudio.ApplicationLibrary.ApplicationLibrary.LoadLibrary(System.String)">
            <summary>
            Load the Library From a Directory
            </summary>
            <param name="DirectoryRoot"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.Autoupdate">
            <summary>
            Auto Update Class
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.Installationgroup">
            <summary>
            Installation group Class
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.Softwarelist">
            <summary>
            Software List
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.ApplicationLibraryItem">
            <summary>
            Represents a single item in the application library
            </summary>
        </member>
        <member name="P:ACT.Core.Types.ACTStudio.ApplicationLibrary.ApplicationLibraryItem.ChildApplicationItems">
            <summary>
            Only Used When Loading For convienance Accessing
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.DownloadInformation">
            <summary>
            Represents the download information specific to this item.
            </summary>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.ApplicationLibrary.DownloadInformation.DownloadType">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.Types.ACTStudio.ApplicationLibrary.DownloadInformation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Types.ACTStudio.GeneratedItem">
            <summary>
            Generated Item Class
            </summary>
        </member>
        <member name="T:ACT.Core.Types.Database.GenericExecutionReturn`1">
             <summary>   A generic execution return. </summary>
            
             <remarks>   Mark Alicz, 8/19/2016. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
        </member>
        <member name="T:ACT.Core.Types.Class_SearchCriteria">
            <summary>
            Specifies a structure that defines a way to search a Class
            </summary>
        </member>
        <member name="M:ACT.Core.Types.ACT_File_Information.Import(System.String)">
            <summary>
            Loads Data From XML
            </summary>
            <param name="XML"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Types.ACT_File_Information.Recreate(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="XML"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Types.TwoValues`1">
            <summary>
            Holds 2 Values a First and Second of Any Type.
            Typically used for Numeric Base Types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ACT.Core.Types.TwoValues`1.First">
            <summary>
            First Property
            </summary>
        </member>
        <member name="F:ACT.Core.Types.TwoValues`1.Second">
            <summary>
            Second Property
            </summary>
        </member>
        <member name="M:ACT.Core.Types.AppVersion.ToString">
            <summary>
            Returns A Version String
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:ACT.Core.Types.AppVersion.FromString(System.String)">
            <summary>
            Generates a AppVersion From "5.5.21"
            </summary>
            <param name="VersionData">Version As String</param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Types.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage
            </summary>
            <example>
                <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
                <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:ACT.Core.Types.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:ACT.Core.Types.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />
            </summary>
            <example>
                <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface
                and this method is used to notify that some property value changed
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:ACT.Core.Types.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
                for method output means that the methos doesn't return normally.<br />
                <c>canbenull</c> annotation is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
                or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:ACT.Core.Types.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly
                (e.g. via reflection, in external library), so this symbol
                will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:ACT.Core.Types.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper
                to not mark symbols marked with such attributes as unused
                (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:ACT.Core.Types.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:ACT.Core.Types.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:ACT.Core.Types.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:ACT.Core.Types.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:ACT.Core.Types.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly
                when marked with <see cref="T:ACT.Core.Types.MeansImplicitUseAttribute" />
                or <see cref="T:ACT.Core.Types.UsedImplicitlyAttribute" />
            </summary>
        </member>
        <member name="F:ACT.Core.Types.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:ACT.Core.Types.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:ACT.Core.Types.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:ACT.Core.Types.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled
                when the invoked method is on stack. If the parameter is a delegate,
                indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated
                while the method is executed
            </summary>
        </member>
        <member name="T:ACT.Core.Types.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example>
                <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder
                within a web project. Path can be relative or absolute,
                starting from web root (~)
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC controller. If applied to a method,
                the MVC controller name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that
                the parameter is an MVC partial view. If applied to a method,
                the MVC partial view name is calculated implicitly from the context.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcSupressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling all inspections
                for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:ACT.Core.Types.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:ACT.Core.Types.SimpleNameValueClass">
             <summary>   (Serializable) a simple name value class. </summary>
            
             <remarks>   Mark Alicz, 7/14/2016. </remarks>
        </member>
        <member name="T:ACT.Core.Graphics.FastPixel">
             <summary>Fast Pixel - Working With Bitmap Images Quickly </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.#ctor(System.Drawing.Bitmap)">
             <summary>   Constructor. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="bitmap">   The bitmap. </param>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.Lock">
             <summary>   Locks this object. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.Unlock(System.Boolean)">
             <summary>   Unlocks. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="setPixels">    true to set pixels. </param>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.Clear(System.Drawing.Color)">
             <summary>   Clears this object to its blank/initial state. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="colour">   The colour. </param>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.SetPixel(System.Drawing.Point,System.Drawing.Color)">
             <summary>   Sets a pixel. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <param name="location"> The location. </param>
             <param name="colour">   The colour. </param>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
             <summary>   Sets a pixel. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="x">        The x coordinate. </param>
             <param name="y">        The y coordinate. </param>
             <param name="colour">   The colour. </param>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.GetPixel(System.Drawing.Point)">
             <summary>   Gets a pixel. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <param name="location"> The location. </param>
            
             <returns>   The pixel. </returns>
        </member>
        <member name="M:ACT.Core.Graphics.FastPixel.GetPixel(System.Int32,System.Int32)">
             <summary>   Gets a pixel. </summary>
            
             <remarks>   Mark Alicz, 7/15/2016. </remarks>
            
             <exception cref="T:System.Exception">    Thrown when an exception error condition occurs. </exception>
            
             <param name="x">    The x coordinate. </param>
             <param name="y">    The y coordinate. </param>
            
             <returns>   The pixel. </returns>
        </member>
        <member name="M:ACT.Core.Graphics.Rectangle.Center">
            <summary>
            Returns the center point of the rectangle
            </summary>
            <returns>Center point of the rectangle</returns>
        </member>
        <member name="M:ACT.Core.Graphics.Rectangle.CenterRight">
            <summary>
            Returns the center right point of the rectangle
            i.e. the right hand edge, centered vertically.
            </summary>        
            <returns>Center right point of the rectangle</returns>
        </member>
        <member name="M:ACT.Core.Graphics.Rectangle.CenterLeft">
            <summary>
            Returns the center left point of the rectangle
            i.e. the left hand edge, centered vertically.
            </summary>        
            <returns>Center left point of the rectangle</returns>
        </member>
        <member name="M:ACT.Core.Graphics.Rectangle.CenterBottom">
            <summary>
            Returns the center bottom point of the rectangle
            i.e. the bottom edge, centered horizontally.
            </summary>        
            <returns>Center bottom point of the rectangle</returns>
        </member>
        <member name="M:ACT.Core.Graphics.Rectangle.CenterTop">
            <summary>
            Returns the center top point of the rectangle
            i.e. the topedge, centered horizontally.
            </summary>        
            <returns>Center top point of the rectangle</returns>
        </member>
        <member name="T:ACT.Core.Helper.Barcodes.Code39">
            <summary>
            Create Barcodes using Code39
            </summary>
        </member>
        <member name="T:ACT.Core.Helper.Database.InternalDataAdapter">
            <summary>
            This class Supports Turning DataReaders to DataTables
            </summary>
            
        </member>
        <member name="M:ACT.Core.Helper.Database.InternalDataAdapter.ConvertToDataTable(System.Data.IDataReader)">
            <summary>
            Convert DataReader to DataTable
            </summary>
            <param name="Reader"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Helper.ErrorLogger">
            <summary>
            Internal Windows ErrorLogger
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.ErrorLogger.CreateErrorData(System.String,System.String,System.String,System.Exception,ACT.Core.Enums.ErrorLevel,System.Int32)">
            <summary>
            Create Error Data
            </summary>
            <param name="Class">Class Name</param>
            <param name="Message">Error Message</param>
            <param name="AdditionalInfo">Additional Information</param>
            <param name="ex">Actual Exception</param>
            <param name="errLevel">Error Level</param>
            <param name="_lineNumber">Line Number</param>
            <returns>JSON Object</returns>
        </member>
        <member name="P:ACT.Core.Helper.ErrorLogger.GetErrorFileName">
            <summary>
            Get Error File Name
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.ErrorLogger.VLogError(System.Object,System.String,System.Exception,ACT.Core.Enums.ErrorLevel,System.Int32)">
            <summary>
            Log Error - ONLY if VerboseDebugging Is Set to True
            </summary>
            <param name="classobj"></param>
            <param name="Message"></param>
            <param name="ex"></param>
            <param name="ErrLevel"></param>
            <param name="_LineNumber"></param>
        </member>
        <member name="M:ACT.Core.Helper.ErrorLogger.LogError(System.Object,System.String,System.Exception,ACT.Core.Enums.ErrorLevel,System.Int32)">
            <summary>
            Log Error
            </summary>
            <param name="classobj"></param>
            <param name="Message"></param>
            <param name="ex"></param>
            <param name="ErrLevel"></param>
            <param name="_LineNumber"></param>
        </member>
        <member name="M:ACT.Core.Helper.ErrorLogger.LogError(System.String,System.String,System.String,System.Exception,ACT.Core.Enums.ErrorLevel,System.Int32)">
            <summary>
            LOG The Error
            </summary>
            <param name="ClassName"></param>
            <param name="ErrorMessage"></param>
            <param name="AdditionalInfo"></param>
            <param name="ex"></param>
            <param name="WarningLevel"></param>
            <param name="_LineNumber"></param>
        </member>
        <member name="T:ACT.Core.Helper.Excel.ExcelHelper">
            <summary>
            ExcelHelper Class
            </summary>
        </member>
        <member name="T:ACT.Core.Helper.JSON.DataRowConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataRow"/> object to and from JSON.
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataRowConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataRowConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataRowConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:ACT.Core.Helper.JSON.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> object to JSON. No support for reading.
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:ACT.Core.Helper.JSON.DataTableConverter">
            <summary>
            Converts a DataTable to JSON. Note no support for deserialization
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ACT.Core.Helper.JSON.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <returns>The object value.</returns>
        </member>
        <member name="F:ACT.Core.Helper.RegularExpressions.ColorHex">
            <summary>
            Hex Color String
            </summary>
        </member>
        <member name="F:ACT.Core.Helper.RegularExpressions.StandardEmail">
            <summary>
            Standard Email Address
            </summary>
        </member>
        <member name="F:ACT.Core.Helper.RegularExpressions.ValidURL">
            <summary>
            with or without http
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ACT.Core.Helper.RegularExpressions.PasswordStrengthA" -->
        <member name="F:ACT.Core.Helper.RegularExpressions.PasswordStrengthB">
            <summary>
            Minimum 8 characters at least 1 Alphabet and 1 Number
            </summary>
        </member>
        <member name="F:ACT.Core.Helper.RegularExpressions.PasswordStrengthC">
            <summary>
            Minimum 8 characters at least 1 Uppercase Alphabet, 1 Lowercase Alphabet, 1 Number and 1 Special Character
            </summary>
        </member>
        <member name="F:ACT.Core.Helper.RegularExpressions.PasswordStrengthD">
            <summary>
            Minimum 8 and Maximum 10 characters at least 1 Uppercase Alphabet, 1 Lowercase Alphabet, 1 Number and 1 Special Character
            </summary>
        </member>
        <member name="F:ACT.Core.Helper.RegularExpressions.MobilePhoneNumber">
            <summary>
            without +91 or 0
            </summary>
        </member>
        <member name="T:ACT.Core.Helper.RandomHelper.Random_Helper">
            <summary>
            Random Operations Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.RandomHelper.Random_Helper.GetRandomString(System.Int32)">
            <summary>
            Generate Random String with All Alpha and Special Characters
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Helper.RandomHelper.Random_Helper.GetRandomStringFileSafe(System.Int32)">
            <summary>
            Generate Random String With FileSafe Parameters
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Helper.RandomHelper.Random_Helper.GenerateRandomString(System.Int32,System.String)">
            <summary>
                Returns a "random" alpha-numeric string of specified length and characters.
            </summary>
            <param name="length">
                the length of the random string
            </param>
            <param name="pickfrom">
                the string of characters to pick randomly from
            </param>
            <returns>
                The generate random string.
            </returns>
        </member>
        <member name="T:ACT.Core.Helper.Security.Security_Helper">
            <summary>
            Security Helper
            </summary>
        </member>
        <member name="M:ACT.Core.Helper.Security.Security_Helper.GeneratePassword(ACT.Core.Enums.Security.SecurityDifficulty)">
            <summary>
            TODO Write Code
            </summary>
            <param name="PasswordRequirements"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Helper.Security.Security_Helper.GetHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Private Method
            </summary>
            <param name="s"></param>
            <param name="hasher"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Helper.StringMethods.ToHiddenPasswordString(System.Int32,System.String)">
            <summary>
            This method generates a string that can be used to represent a password on a web or windows form 
            </summary>
            <param name="Length">Lenght of Password To Generate</param>
            <param name="VisChar">Visible character</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Helper.StringMethods.DomainMapper(System.Text.RegularExpressions.Match)">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Helper.StringMethods.ProcessText(System.String)">
            <summary>
                Processes the text.
            </summary>
            <param name="text">The text.</param>
            <returns>
                The process text.
            </returns>
        </member>
        <member name="M:ACT.Core.Helper.StringMethods.ProcessText(System.String,System.Boolean)">
            <summary>
                Processes the text.
            </summary>
            <param name="text">The text.</param>
            <param name="nullify">The nullify.</param>
            <returns>
                The process text.
            </returns>
        </member>
        <member name="M:ACT.Core.Helper.StringMethods.ProcessText(System.String,System.Boolean,System.Boolean)">
            <summary>
                Processes the text.
            </summary>
            <param name="text">The text.</param>
            <param name="nullify">The nullify.</param>
            <param name="trim">The trim.</param>
            <returns>
                The process text.
            </returns>
        </member>
        <member name="T:ACT.Core.Interfaces.CodeGeneration.I_CodeGeneration_UpdateEnums">
            <summary>
            
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.CodeGeneration.I_CodeGenerationSettings">
            <summary>
            Defines the Code Generation Settings
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.CodeGeneration.I_GeneratedCode">
            <summary>
            Defines The Code Generation Output
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.CodeGeneration.I_CodeGenerator">
            <summary>
            Defines the Actual Code Generation Class
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Common.I_ErrorLoggable">
            <summary>
            Defines a method for logging errors
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_ErrorLoggable.LogError(System.String,System.String,System.Exception,System.String,ACT.Core.Enums.ErrorLevel)">
            <summary>
            Logs the Error 
            </summary>
            <param name="className">Name of the class the error occured</param>
            <param name="summary">Summary of the Error</param>
            <param name="ex">Exception</param>
            <param name="additionInformation">Additional Information</param>
            <param name="errorType">Error Type</param>
        </member>
        <member name="T:ACT.Core.Interfaces.Common.I_Saveable">
            <summary>
            Specifies that the class can be Saved and Deleted
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Common.I_TestResult">
            <summary>
            Defines a Common Test Result
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Common.I_TestResultExpanded">
            <summary>
            Defines a Common Test Result
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Common.I_Compression">
            <summary>
            Defines a Compression Interface to be used by ACT and others.
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.CompressFile(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            Compress File Usings Specified Settings
            </summary>
            <param name="ZipSettings">Settings</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.DeCompressFile(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            DeCompress File Usings Specified Settings
            </summary>
            <param name="ZipSettings">Settings</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.CompressData(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            Compress Data Usings Specified Settings
            </summary>
            <param name="ZipSettings">Settings</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.DeCompressData(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            DeCompress Data Usings Specified Settings
            </summary>
            <param name="ZipSettings">Settings</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.CompressFolder(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            Compress Folder Usings Specified Settings
            </summary>
            <param name="ZipSettings">Settings</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.AddFileToZip(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            Add a File to an existing Zip file
            </summary>
            <param name="ZipSettings"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.UnzipFile(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            Unzip a File
            </summary>
            <param name="ZipSettings"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Compression.UnzipFiles(ACT.Core.Compression.Compressed_File_Settings)">
            <summary>
            Unzip a set of files.
            </summary>
            <param name="ZipSettings"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Interfaces.Common.I_Plugin">
            <summary>
            Defines a Plugin
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Plugin.SetImpersonate(ACT.Core.Interfaces.Security.Authentication.I_UserInfo)">
            <summary>
            Sets the Impersonation of the Executing User Level
            </summary>
            <param name="UserInfo"></param>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Plugin.ReturnSystemSettingRequirements">
            <summary>
            Returns all the System Settings Required By The Plugin
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.I_Plugin.ValidatePluginRequirements">
            <summary>
            Validates the Configuration File is Setup Properly
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.IWebPlugin.ReturnSystemSettingRequirements">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Common.IWebPlugin.GenerateOutput(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            
            </summary>
            <param name="StartSurroundTag"></param>
            <param name="Data"></param>
            <param name="EndSurroundTag"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Interfaces.Communication.I_Email_Message">
            708-655-5167
            PLO-8LO-OLKI-OKLI
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.uniqueMessageID">
            <summary>
            Unique Message ID
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.senderID">
            <summary>
            Global Senders ID
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.reciverID">
            <summary>
            Global Recievers ID
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.subjectText">
            <summary>
            Specific Message Subject
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.bodyText">
            <summary>
            Specific Message Body
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.touchChain">
            <summary>
            Specific Touch Chain For This Message (Includes Complete History)
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Communication.I_Email_Message.metaData">
            <summary>
            Specific Meta Data
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DBObject.ReturnDatabaseChild(System.String)">
            <summary>
            Returns a object that represnts a Database Table.  Used primarly for AUTO Generated Code.
            </summary>
            <param name="PhysicalTableName">The Physical Table Name</param>
            <returns>object representing that table.</returns>
        </member>
        <member name="T:ACT.Core.Interfaces.DataAccess.I_DataAccess">
            <summary>
            Represents the DataAccess Class
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.ExecuteDynamicProcedure``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Execute a Stored Procedure Return the Type Indicated from the Column Indicated.
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <param name="Name">Stored Procedure Name</param>
            <param name="Parameters">SQL Parameters</param>
            <param name="ColumnToReturn">Column Ordinal Position to return</param>
            <returns>T Single Value</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.CreateTableFromICoreObject(System.Object,System.String@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Table from ICoreObject - creates All the Columns based on Properties in the ICore Object.
            </summary>
            <param name="Class"></param>
            <param name="SQL"></param>
            <param name="AutoExecute"></param>
            <param name="CreateIdentity"></param>
            <param name="Recursive"></param>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.GenerateWhereStatement(ACT.Core.Interfaces.DataAccess.I_DbWhereStatement,System.String)">
            <summary>
            Generates The Where Statement Based On the IDbWhereStatement
            </summary>
            <param name="WhereStatement"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.GenerateWhereStatementParameters(ACT.Core.Interfaces.DataAccess.I_DbWhereStatement)">
            <summary>
            Generates a list of Parameters use in the SQL Action
            </summary>
            <param name="Where"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.RunCommand(System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.Boolean,System.Data.CommandType)">
            <summary>
            Performs a Database Action
            </summary>
            <param name="CommandText">SQL Command to Execute</param>
            <param name="Params">Params to Pass - System.Data.IDataParameter</param>
            <param name="ReturnsRows">Trap the return tables?</param>
            <param name="CmdType">Type of Command - System.Data.CommandType</param>
            <returns>IQueryResult</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.RunCommand(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.Data.IDataParameter}},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Data.CommandType})">
            <summary>
            Performs a Database Action.  All Indexes must match- i.e Command[0] with Param[0]
            </summary>
            <param name="CommandTexts">SQL Commands to Execute</param>
            <param name="Params">List of a List of Params to Pass - System.Data.IDataParameter</param>
            <param name="ReturnsRows">List of Trap the return tables?</param>
            <param name="CmdType">Type of Command - System.Data.CommandType</param>
            <returns>IQueryResult</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.RunCommand(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.Data.IDataParameter}},System.Collections.Generic.List{System.Boolean},System.Boolean,System.Boolean,System.Collections.Generic.List{System.Data.CommandType})">
            <summary>
            Performs a Database Action.  All Indexes must match- i.e Command[0] with Param[0]
            </summary>
            <param name="CommandTexts">SQL Commands to Execute</param>
            <param name="Params">List of a List of Params to Pass - System.Data.IDataParameter</param>
            <param name="ReturnsRows">List of Trap the return tables?</param>
            <param name="UseTransactions">This will wrap the Commands in 1 Transaction</param>
            <param name="AutoRollback">This will auto rollback the transaction on a failer</param>
            <param name="CmdType">Type of Command - System.Data.CommandType</param>
            <returns>IQueryResult</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.Open">
            <summary>
            Open the default connection.  Defined in SystemConfigurationFile
            </summary>
            <returns>Success Result</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.Open(System.String)">
            <summary>
            Open a Specific Connection.
            </summary>
            <param name="ConnectionString">Connection String</param>
            <returns>Success Result</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.Open(System.String,System.Boolean)">
            <summary>
            Open a Specific Connection.
            </summary>
            <param name="ConnectionString">Connection String</param>
            <param name="EncryptConnectionString">Set to true if you want to Encrypt the Connection String using the default settings in configuration file</param>
            <returns>Success Result</returns>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DataAccess.Connected">
            <summary>
            Returns true if Database Connection is Active
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DataAccess.ConnectionString">
            <summary>
            Returns the Connection String.
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.GetStoredSQLQuery(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
            <param name="GroupName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.BeginTransaction">
            <summary>
            Start a Transaction
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.CommitTransaction">
            <summary>
            Commit A Transaction
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.RollbackTransaction">
            <summary>
            Roll Current Transaction Back
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the Current Command Timeout In Seconds
            </summary>
            <param name="Seconds"></param>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.ExportDatabase">
            <summary>
            Export the Current Database
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.ModifyTable(ACT.Core.Interfaces.DataAccess.I_DbTable,ACT.Core.Interfaces.DataAccess.I_DbTable)">
            <summary>
            Modify Table
            </summary>
            <param name="OriginalTable">Original Table Structure</param>
            <param name="NewTable">New Table Structure</param>
            <returns>True on Success</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.CreateTable(ACT.Core.Interfaces.DataAccess.I_DbTable)">
            <summary>
            Create A Table
            </summary>
            <param name="NewTable">New Table Structure</param>
            <returns>True on Success</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.DropTable(ACT.Core.Interfaces.DataAccess.I_DbTable)">
            <summary>
            Drop / Remove a Table
            </summary>
            <param name="TableToDrop">Table To Drop</param>
            <returns>True on Success</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.InsertData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Inserts Data Into the Table
            </summary>
            <param name="TableName">Table Name To Insert Data Into</param>
            <param name="FieldsAndValues">Fields and Values To Insert</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.UpdateData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ACT.Core.Interfaces.DataAccess.I_DbWhereStatement)">
            <summary>
            Updates the data in the table specified
            </summary>
            <param name="TableName">Table To Update data In</param>
            <param name="FieldsAndValues">Fields And Values</param>
            <param name="Where">Where statement defining scope of update</param>
            <returns>IQueryResult</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.DeleteData(System.String,ACT.Core.Interfaces.DataAccess.I_DbWhereStatement)">
            <summary>
            Deletes the data in the table specified
            </summary>
            <param name="TableName">Table To Delete data From</param>
            <param name="Where">Where statement defining scope of delete</param>
            <returns>IQueryResult</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DataAccess.DeleteData(ACT.Core.Interfaces.DataAccess.I_DbTable,System.Collections.Generic.Dictionary{ACT.Core.Interfaces.DataAccess.I_DbColumn,System.Object},System.Boolean)">
            <summary>
            Special Function.  You can use the to clean databases when you are really deleting items.  FK Erros would occur otherwise
            </summary>
            <param name="Table"></param>
            <param name="FieldsAndValues"></param>
            <param name="RecursiveDelete"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Interfaces.DataAccess.I_Db">
            <summary>
            Defines the Structure of a Database
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_Db.ModifyTable(ACT.Core.Interfaces.DataAccess.I_DbTable,ACT.Core.Interfaces.DataAccess.I_DbTable)">
            <summary>
            Included to reduce 1 line of developers code :->
            </summary>
            <param name="Original"></param>
            <param name="New"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_Db.Validate">
            <summary>
            Validate the Current Structure of the Database
            </summary>
            <returns>I_TestResult</returns>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.ParentTable">
            <summary>
            Reference to the Parent Table
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Name">
            <summary>
            Fully Qualified Name
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.ShortName">
            <summary>
            Short Name
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.DataType">
            <summary>
            Data Type Of Column
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Default">
            <summary>
            Default Value i.e GetDate() or 1 or '1' etc..
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Nullable">
            <summary>
            Allows Nulls
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Size">
            <summary>
            Size of Data Column
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Precision">
            <summary>
            The Precision
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Scale">
            <summary>
            The Scale
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Identity">
            <summary>
            Is this an Identity Column
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.AutoIncrement">
            <summary>
            Auto Increment
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.IdentityIncrement">
            <summary>
            Identity Increment
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.IdentitySeed">
            <summary>
            Identity Seed
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.IsPrimaryKey">
            <summary>
            Is this Column a Primary Key
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbColumn.Description">
            <summary>
            ColumnDescription
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.DataAccess.I_DbRelationship">
            <summary>
            Interface Defines a DBRelationship
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.ColumnName">
            <summary>
            Column Name Where Relationship Is Found
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.TableName">
            <summary>
            Table Name Where Relationship Is Found (Fully Qualified)
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.ShortTableName">
            <summary>
            Short Name of Table Where Relationship is Found
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.RelationshipName">
            <summary>
            Relationship Name..  Changed depending on Origin (FK_NAME,PK_NAME)
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.External_TableName">
            <summary>
            Table Name Where Relationship Matched (Fully Qualified)
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.ShortExternal_TableName">
            <summary>
            Short Name of Table Where Relationship is Matched
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.External_ColumnName">
            <summary>
            Column Name Where Relationship Is Matched
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbRelationship.IsForeignKey">
            <summary>
            Specifies if this relationship is a ForeignKey or not Depending on Origin
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.Columns">
            <summary>
            Enumerable List of Columns
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.ParentDatabase">
            <summary>
            Parent Of This Table
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.Name">
            <summary>
            Name of the Physical Table.  FULLY Qualified Name i.e [DatabaseA].[dbo].[Member]
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.ShortName">
            <summary>
            Name of the table.  Not Fully Qualified. i.e. Member
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.Description">
            <summary>
            Description Of The Table
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.Owner">
            <summary>
            Owner of the Table
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.AddColumn(ACT.Core.Interfaces.DataAccess.I_DbColumn)">
            <summary>
            Add a Column to the Structure
            </summary>
            <param name="Column"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.GetColumn(System.String,System.Boolean)">
            <summary>
            Get Column by Name
            </summary>
            <param name="Name"></param>
            <param name="IgnoreCase"></param>
            <returns>IDbColumn</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.GetColumn(System.Int32)">
            <summary>
            Get Column at Index Position
            </summary>
            <param name="Index"></param>
            <returns>IDbColumn</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.RemoveColumn(System.Int32)">
            <summary>
            Remove a Column From A Index Position
            </summary>
            <param name="Index"></param>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.RemoveColumn(System.String,System.Boolean)">
            <summary>
            Remove a Column by Name
            </summary>
            <param name="Name"></param>
            <param name="IgnoreCase"></param>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.GetPrimaryColumnNames">
            <summary>
            Gets the Primary Keys
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.ColumnCount">
            <summary>
            Return the Column Count
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.IsSystem">
            <summary>
            Is a System Table
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.IsPackageTable">
            <summary>
            Is a Package Table??
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.IsUserTable">
            <summary>
            Is a UserTable
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.PrimaryKeyColumnName">
            <summary>
            We only Support Single Primary Keys.  NO Composite Keys!
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbTable.RelationshipCount">
            <summary>
            FOREIGN Keys are only the ones that are found using sp_fkeys in MSSSQL
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.MoveColumnUp(System.String)">
            <summary>
            Good luck implemeting this . I choose to only process this on create 
            </summary>
            <param name="ColName"></param>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbTable.MoveColumnDown(System.String)">
            <summary>
            Good luck implemeting this .  I choose to only process this on create
            </summary>
            <param name="ColName"></param>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbView.Columns">
            <summary>
            Enumerable List of Columns
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbView.ParentDatabase">
            <summary>
            Parent Of This Table
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbView.Name">
            <summary>
            Name of the Physical Table.  FULLY Qualified Name i.e [DatabaseA].[dbo].[Member]
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbView.ShortName">
            <summary>
            Name of the table.  Not Fully Qualified. i.e. Member
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbView.Description">
            <summary>
            Description Of The Table
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.DataAccess.I_DbView.Owner">
            <summary>
            Owner of the Table
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbView.AddColumn(ACT.Core.Interfaces.DataAccess.I_DbColumn)">
            <summary>
            Add a Column to the Structure
            </summary>
            <param name="Column"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbView.GetColumn(System.String,System.Boolean)">
            <summary>
            Get Column by Name
            </summary>
            <param name="Name"></param>
            <param name="IgnoreCase"></param>
            <returns>IDbColumn</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.DataAccess.I_DbView.GetColumn(System.Int32)">
            <summary>
            Get Column at Index Position
            </summary>
            <param name="Index"></param>
            <returns>IDbColumn</returns>
        </member>
        <member name="T:ACT.Core.Interfaces.DataAccess.I_QueryResult">
            <summary>
            Represents a Query result that holds the data at the exceptions to any queries
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.APIKey">
            <summary>
            Configure the Security Key
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.APISecret">
            <summary>
            Configure The Security App
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.ProviderUID">
            <summary>
            A Unique Provider Identity: ONLY Registered DLL's Obtain a Provider UID.  Others Need to leave This Blank
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.IsTokenValid(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates A User Token
            </summary>
            <param name="TokenID"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.LoginUser(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Login the User
            </summary>
            <param name="UserName"></param>
            <param name="PassWord"></param>
            <param name="AdditionalData"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.GenerateToken(ACT.Core.Interfaces.Security.Authentication.I_LoginResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates A New Security Token and Populates the UserInfo Class
            </summary>
            <param name="UserInfo">Can be null if only needing to access Application Level Functions</param>
            <param name="AdditionalData">Additional Data To Embed in the Token</param>
            <param name="ApplicationID">ApplicationID to use</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.GetUserInfo(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the User Information Full Login Info Required
            </summary>
            <param name="UserName"></param>
            <param name="Password"></param>
            <param name="AdditionalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.GetUserInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the User Information, Token Based Auth
            </summary>
            <param name="TokenID"></param>
            <param name="AdditionalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.UpdateUserInfo(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},ACT.Core.Interfaces.Security.Authentication.I_UserInfo)">
            <summary>
            Update the User Info (Full User Authentication)
            </summary>
            <param name="UserName"></param>
            <param name="PassWord"></param>
            <param name="AdditionalData"></param>
            <param name="UpdatedUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.UpdateUserInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},ACT.Core.Interfaces.Security.Authentication.I_UserInfo)">
            <summary>
            Update the User Info (Token Based Auth)
            </summary>
            <param name="TokenID"></param>
            <param name="AdditionalData"></param>
            <param name="UpdatedUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.CreateUser(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},ACT.Core.Interfaces.Security.Authentication.I_UserInfo)">
            <summary>
            Create New User
            </summary>
            <param name="UserName"></param>
            <param name="PassWord"></param>
            <param name="AdditionalData"></param>
            <param name="NewUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_Simple_Security_Provider.CreateUser(System.String,System.Collections.Generic.Dictionary{System.String,System.String},ACT.Core.Interfaces.Security.Authentication.I_UserInfo)">
            <summary>
            Create New User 
            </summary>
            <param name="TokenID"></param>
            <param name="AdditionalData"></param>
            <param name="NewUserInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider">
            <summary>
            This interface defines the methods needed to Connect To A Security Provider.  Active Directory, Or Custom Base Auth
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.APIKey">
            <summary>
            Configure the Security Key
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.APISecret">
            <summary>
            Configure The Security App
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.ProviderUID">
            <summary>
            A Unique Provider Identity: ONLY Registered DLL's Obtain a Provider UID.  Others Need to leave This Blank
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.IsTokenValid(System.Guid,System.String,System.String)">
            <summary>
            Validates A User Token
            </summary>
            <param name="TokenID"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GenerateToken(System.Guid,ACT.Core.Interfaces.Security.Authentication.I_UserInfo,System.String)">
            <summary>
            Generates A New Security Token and Populates the UserInfo Class
            </summary>
            <param name="UserInfo">Can be null if only needing to access Application Level Functions</param>
            <param name="AdditionalData">Additional Data To Embed in the Token</param>
            <param name="ApplicationID">ApplicationID to use</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetChildSecurityProviders(System.Guid)">
            <summary>
            Child Security Providers Provide Additional Options For a Multi Tier Authentication Application
            </summary>
            <returns></returns>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.ConfigurationSettings">
            <summary>
            Additional Configuration Settings Defined In the XML File.  Or Loaded Seperatly outside if the configuration file.
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.LoginUser(System.Guid,System.String,System.String,System.String)">
            <summary>
            Login the User
            </summary>
            <param name="UserName">Clear Text UserName</param>
            <param name="Password">Clear Text PassWord</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.IsUserMemberOfGroup(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Validates User Group Membership
            </summary>
            <param name="UserInfo"></param>
            <param name="Group"></param>
            <returns>bool</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetGroupID(System.Guid,System.String,System.String)">
            <summary>
            Get The Group ID From The Name
            </summary>
            <param name="GroupName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetAllGroups(System.Guid,System.String)">
            <summary>
            Returns all the available groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.AddUserToGroup(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Adds A User To The Group
            </summary>
            <param name="UserID"></param>
            <param name="GroupID"></param>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetConfirmationCode(System.Guid,System.String)">
            <summary>
            Gets the Confirmation Code For The Email Address
            </summary>
            <param name="EmailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetEncryptionKey(System.Guid,System.Guid,System.String)">
            <summary>
            Get Encryption Key
            </summary>
            <param name="UserID"></param>
            <returns>Encryption Key</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetUserID(System.Guid,System.String,System.String)">
            <summary>
            Get User ID
            </summary>
            <param name="AccessToken"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.SendForgotPasswordEmail(System.Guid,System.String,System.String)">
            <summary>
            Sends the Forgot Password Email
            </summary>
            <param name="EmailAddress"></param>
            <returns>True if Email Address Found False If Not</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GetUserInfo(System.Guid,System.Guid,System.String)">
            <summary>
            Returns a Delimeted string of User Info.  Delimiters are defined in ACT Configuration Settings.
            </summary>
            <param name="UserID"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.CreateUser(ACT.Core.Interfaces.Security.Authentication.I_UserInfo,System.Guid,System.String)">
            <summary>
            Creates A New User
            </summary>
            <param name="EmailAddress"></param>
            <param name="UserName"></param>
            <param name="Password"></param>
            <returns>False O</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.UpdateUser(ACT.Core.Interfaces.Security.Authentication.I_UserInfo,System.Guid,System.String)">
            <summary>
            Updates A User.  
            </summary>
            <param name="BasicInfo">Make Sure You Set UserInfo.UserKey to ID of User</param>
            <param name="AdditionalData">APIKEY</param>
            <returns>Update Result</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.UpdatePassword(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Update Password
            </summary>
            <param name="UserID">UserID of Member to be updated</param>
            <param name="Password">New Unencrypted Password</param>
            <param name="AdditionalData">Additional Data</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.UpdateUserName(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Update UserName
            </summary>
            <param name="UserID"></param>
            <param name="UserName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.UpdateEmail(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Update Email
            </summary>
            <param name="UserID"></param>
            <param name="Email"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.DeleteUser(System.Guid,System.Guid,System.String)">
            <summary>
            Delete User
            </summary>
            <param name="UserID"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.AddUserToApplication(System.String,System.Guid,System.String)">
            <summary>
            Adds a User To The 
            </summary>
            <param name="AccessToken"></param>
            <param name="AdditionalData"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.GenerateSMSAuthenticationCode(System.Guid,System.String,System.String)">
            <summary>
            Generates a Code for use in SMS Authentication
            </summary>
            <param name="AccessToken"></param>
            <param name="ExternalID"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_SecurityProvider.ConfirmSMSAuthenticationCode(System.Guid,System.String,System.String,System.String)">
            <summary>
            Confirms the Authentication Code
            </summary>
            <param name="AccessToken"></param>
            <param name="Code"></param>
            <param name="ExternalID"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Interfaces.Security.Authentication.I_UserInfo">
            <summary>
            Defines a common USER Information Structure
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.AuthenticationToken">
            <summary> Current Authentication Token</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.Active">
            <summary> Is User Active</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.AdditionalInfo">
            <summary> Additional User Information</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.Authenticated">
            <summary> Is The Current User Authenticated</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.UserKey">
            <summary> Primary Key Of The User </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.UserName">
            <summary> UserName Associated With This User</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.Password">
            <summary> Used In Update And Create Procedures Otherwise Ignored</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.Email">
            <summary> Email Address Of The User</summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.CompanyName">
            <summary> First Name </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.FirstName">
            <summary> First Name </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.LastName">
            <summary> Last Name </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.MiddleName">
            <summary> Middle Name </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.WorkPhone">
            <summary> Work Phone </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.WorkPhoneExt">
            <summary> Work Phone Ext </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.MobilePhone">
            <summary> Mobile Number </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.EncryptionKey">
            <summary> User Encryption Key </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.ConfirmationCode">
            <summary> Confirmation Code To Validate Email </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.GetUnencryptedPassword">
            <summary>
            Optional Function To Get UnEncrypted Password
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Security.Authentication.I_UserInfo.GetGroups">
            <summary> List Of All The Users Groups</summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Security.Encryption.IEncryptionPacket">
            <summary>
            Work in progress
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Security.UserData.I_UserAddress">
            <summary>
            Defines a Basic Placeholder for passing User State
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Serialization.I_CacheAble">
            <summary>
            I_CacheAble
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Serialization.I_CacheAble.HashID">
            <summary>
            Get Hash ID -- Calculated By Hashing the Object
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Serialization.I_CacheAble.MemoryCached">
            <summary>
            If the memory is cached in the systems memory (NOT Load Balanced Safe)
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Serialization.I_CacheAble.DatabaseCached">
            <summary>
            Cache the object in the database
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Serialization.I_CacheAble.ConfigurationData">
            <summary>
            JSON Configuration Data
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.Serialization.I_CacheAble.SaveUpdate">
            <summary>
            Save Update the Cache based on the HashID and the Settings
            </summary>
            <seealso cref="T:ACT.Core.Interfaces.Common.I_TestResult"/>
            <returns>I_TestResult</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.Serialization.I_CacheAble.Retrieve">
            <summary>
            Retrieve the object from cache if it exists
            </summary>
            <returns>object in cache</returns>
        </member>
        <member name="T:ACT.Core.Interfaces.WebServices.Configuration.I_ACT_ConfigPluginData">
            <summary>
            Holds the Configuration Template Data
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.WebServices.Configuration.I_ACT_ConfigData">
            <summary>
            Holds the Configuration Template Data
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.WebServices.Configuration.I_ACT_ConfigTemplate">
            <summary>
            Represents a ACT Configuration File Template
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.WebServices.Configuration.I_ACT_Configuration">
            <summary>
            This is a Public ACT Web Service Interface
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Web.IIS.I_IISHit">
            <summary>
            Based On http://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/676400bc-8969-4aa7-851a-9319490a9bbb.mspx?mfr=true
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Web.I_ACT_Web_Security_Page">
            <summary>
            Web Security Interface
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Web.I_ACT_Web_Security_Page.MemberID">
            <summary>
            Current Member ID
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Web.I_ACT_Web_Security_Page.SecurityDataEncrypted">
            <summary>
            Security Data Encrypted
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.Web.I_ACT_Web_Security_Page.SecurityDataRaw">
            <summary>
            Security Data Raw String
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.I_Core">
            <summary>
            Core Functionality Definition
            </summary>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.StandardReplaceMent(System.String,ACT.Core.Enums.RepacementStandard)">
            <summary>
            Standard Text Replacement Functionality
            </summary>
            <param name="instr"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.ImportXMLData(System.String)">
            <summary>
            Imports the variable XML into the current class
            </summary>
            <param name="XML">XML Data to Import</param>
            <returns>true on success</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.ExportXMLData">
            <summary>
            Exports the current class to XML
            </summary>
            <returns>XML Representation of class</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.GetErrors">
            <summary>
            Returns the Errors stored in the local variable
            </summary>
            <returns><![CDATA[List<Exception>]]></returns>
        </member>
        <member name="P:ACT.Core.Interfaces.I_Core.HasChanged">
            <summary>
            Specifies if the class has changed in any way
            </summary>
        </member>
        <member name="P:ACT.Core.Interfaces.I_Core.PublicProperties">
            <summary>
            Get all of the Public Properties in the class
            </summary>
            <returns><![CDATA[List<string> of all the property names]]></returns>        
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.ReturnProperty(System.String)">
            <summary>
            Return a property value by name
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.ReturnPropertyType(System.String)">
            <summary>
            Returns the type of the property
            </summary>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.SetProperty(System.String,System.Object)">
            <summary>
            Trys to set a property using the propertyname and the value. Case sensitive people.
            </summary>
            <param name="PropertyName">Case Sensitive Property Name</param>
            <param name="value">value</param>
            <returns>I_TestResult - Specifying if the Set was successfull</returns>
        </member>
        <member name="M:ACT.Core.Interfaces.I_Core.HealthCheck">
            <summary>
            Checks The Health Of The Class.  Use this to return missing configuration.  Invalid Permissions Etc..
            </summary>
            <returns>I_TestResult - Specifying changes needed to be made to obtain a good health report.</returns>
        </member>
        <member name="T:ACT.Core.Interfaces.Encoding.I_Encoder">
            <summary>
            Basic Encoding Only
            </summary>
        </member>
        <member name="T:ACT.Core.Interfaces.Encoding.IEncoderRules">
            <summary>
            Currently Only Supporting Simple Character Replacement
            </summary>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.Reset">
            <summary>
            Resets the current position to the start of the current document
            </summary>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.Reset(System.String)">
            <summary>
            Sets the current document and resets the current position to the start of it
            </summary>
            <param name="html"></param>
        </member>
        <member name="P:ACT.Core.Parsing.HTML.TextParser.EndOfText">
            <summary>
            Indicates if the current position is at the end of the current document
            </summary>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.Peek">
            <summary>
            Returns the character at the current position, or a null character if we're
            at the end of the document
            </summary>
            <returns>The character at the current position</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.Peek(System.Int32)">
            <summary>
            Returns the character at the specified number of characters beyond the current
            position, or a null character if the specified position is at the end of the
            document
            </summary>
            <param name="ahead">The number of characters beyond the current position</param>
            <returns>The character at the specified position</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.Substring(System.Int32)">
            <summary>
            Extracts a substring from the specified position to the end of the text
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.Substring(System.Int32,System.Int32)">
            <summary>
            Extracts a substring from the specified range of the current text
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MoveAhead">
            <summary>
            Moves the current position ahead one character
            </summary>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MoveAhead(System.Int32)">
            <summary>
            Moves the current position ahead the specified number of characters
            </summary>
            <param name="ahead">The number of characters to move ahead</param>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MoveTo(System.String,System.Boolean)">
            <summary>
            Moves to the next occurrence of the specified string
            </summary>
            <param name="s">String to find</param>
            <param name="ignoreCase">Indicates if case-insensitive comparisons are used</param>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MoveTo(System.Char)">
            <summary>
            Moves to the next occurrence of the specified character
            </summary>
            <param name="c">Character to find</param>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MoveTo(System.Char[])">
            <summary>
            Moves to the next occurrence of any one of the specified
            characters
            </summary>
            <param name="carr">Array of characters to find</param>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MoveToEndOfLine">
            <summary>
            Moves the current position to the first character that is part of a newline
            </summary>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.TextParser.MovePastWhitespace">
            <summary>
            Moves the current position to the next character that is not whitespace
            </summary>
        </member>
        <member name="P:ACT.Core.Parsing.HTML.HtmlTag.Name">
            <summary>
            Name of this tag
            </summary>
        </member>
        <member name="P:ACT.Core.Parsing.HTML.HtmlTag.Attributes">
            <summary>
            Collection of attribute names and values for this tag
            </summary>
        </member>
        <member name="P:ACT.Core.Parsing.HTML.HtmlTag.TrailingSlash">
            <summary>
            True if this tag contained a trailing forward slash
            </summary>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlTag.HasAttribute(System.String)">
            <summary>
            Indicates if this tag contains the specified attribute. Note that
            true is returned when this tag contains the attribute even when the
            attribute has no value
            </summary>
            <param name="name">Name of attribute to check</param>
            <returns>True if tag contains attribute or false otherwise</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.FindTagWithAttribute(System.String,System.String,System.String,System.Boolean,System.Boolean)">
             <summary>   Searches for the first tag with attribute and value. </summary>
            
             <remarks>   Mark Alicz, 12/24/2016. </remarks>
            
             <param name="TagName">          Name of the tag. </param>
             <param name="AttributeName">    Name of the attribute. </param>
             <param name="AttributeValue">   The attribute value. This can be a regular expression if UseRegEx is passed in the next param. </param>
             <param name="CaseSensitive">    true to case sensitive. </param>
            
             <returns>   The found tag with attribute. </returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.ParseNext(System.String,ACT.Core.Parsing.HTML.HtmlTag@)">
            <summary>
            Parses the next tag that matches the specified tag name
            </summary>
            <param name="name">Name of the tags to parse ("*" = parse all tags)</param>
            <param name="tag">Returns information on the next occurrence of the specified tag or null if none found</param>
            <returns>True if a tag was parsed or false if the end of the document was reached</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.ParseTag(System.String,ACT.Core.Parsing.HTML.HtmlTag@,System.Boolean@)">
            <summary>
            Parses the contents of an HTML tag. The current position should be at the first
            character following the tag's opening less-than character.
            
            Note: We parse to the end of the tag even if this tag was not requested by the
            caller. This ensures subsequent parsing takes place after this tag
            </summary>
            <param name="reqName">Name of the tag the caller is requesting, or "*" if caller
            is requesting all tags</param>
            <param name="tag">Returns information on this tag if it's one the caller is
            requesting</param>
            <param name="inScript">Returns true if tag began, and did not end, and script
            block</param>
            <returns>True if data is being returned for a tag requested by the caller
            or false otherwise</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.ParseTagName">
            <summary>
            Parses a tag name. The current position should be the first character of the name
            </summary>
            <returns>Returns the parsed name string</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.ParseAttributeName">
            <summary>
            Parses an attribute name. The current position should be the first character
            of the name
            </summary>
            <returns>Returns the parsed name string</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.ParseAttributeValue">
            <summary>
            Parses an attribute value. The current position should be the first non-whitespace
            character following the equal sign.
            
            Note: We terminate the name or value if we encounter a new line. This seems to
            be the best way of handling errors such as values missing closing quotes, etc.
            </summary>
            <returns>Returns the parsed value string</returns>
        </member>
        <member name="M:ACT.Core.Parsing.HTML.HtmlParser.MovePastScript">
            <summary>
            Locates the end of the current script and moves past the closing tag
            </summary>
        </member>
        <member name="T:ACT.Core.PortableSystemSettings">
            <summary>
            Portable System Settings Class
            </summary>
        </member>
        <member name="F:ACT.Core.PortableSystemSettings.LoadErrors">
            <summary>
            LoadErrors  Contains all of the Errors that the Object Encountered.
            </summary>
        </member>
        <member name="P:ACT.Core.PortableSystemSettings.Loading">
            <summary>
            Is The System Settings Loading
            </summary>
        </member>
        <member name="P:ACT.Core.PortableSystemSettings.SettingKeys">
            <summary>
            Return all the setting Keys
            </summary>
        </member>
        <member name="P:ACT.Core.PortableSystemSettings.LoadedSettings">
             <summary>   Gets the loaded settings. </summary>
            
             <value> The loaded settings. </value>
        </member>
        <member name="P:ACT.Core.PortableSystemSettings.CurrentLocation">
            <summary>
            Current File Location
            </summary>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.#ctor(System.String,System.Boolean)">
            <summary>
            Primary Constructor
            </summary>
            <param name="Location"></param>
            <param name="LoadData"></param>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.ClearBuffer">
            <summary>
            Clears the Setting Buffer
            </summary>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.ExportXMLData">
            <summary>
            Exports the Settings without Regaurd to Order or Formatting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.GetSettingByName(System.String)">
            <summary>
            Return a SystemSetting By Name (Returns Value="" If Not Found)
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.ImportXMLData(System.String)">
            <summary>
            Trys and Imports the DATA.  THIS METHOD IS HARD CODED TO USE DIP_TestResults!!!!
            </summary>
            <param name="XML">XML as Unicode String</param>
            <returns>I_TestResult</returns>
        </member>
        <member name="P:ACT.Core.PortableSystemSettings.CurrentSettingFileLocation">
            <summary>
            Returns and Generates the Location For The Settings File
            If UseReg.txt Exists in DLL Directory
            First Looks In Root\Bin\SystemConfiguration.xml
            Seconds Looks in Root\SystemConfiguration.xml
            Third Looks in Registry LocalMachine\SOFTWARE\GamersGatherInc\ACTConfigFileLocation
            </summary>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.LoadSystemSettings(System.String)">
            <summary>
            Loads all the System Settings and Resets the Buffer
            </summary>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.MeetsExpectations(ACT.Core.Interfaces.Common.I_Plugin)">
            <summary>
            This function tests the PLUGIN to determine if it meets Expectations
            </summary>
            <param name="Plugin"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.PerformSave">
            <summary>
            Writes the Current Values to the File System
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.PerformSaveAs(System.String)">
            <summary>
            Performs The Save Feature But Gets A New Location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.RemoveSetting(ACT.Core.SystemSetting)">
            <summary>
            Removes a Setting from the Static List and Saves it the the Hard Drive
            </summary>
            <param name="ItemToDelete">SystemSetting to Delete</param>
            <returns>True On Success</returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.SaveSetting(ACT.Core.SystemSetting,System.Boolean,System.String)">
            <summary>
            Saves the setting to the Static Dictionary and Saves it the the HardDrive
            </summary>
            <param name="ItemToSave">SystemSetting To Save</param>
            <returns>True on Success</returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.AddUserSetting(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add User Setting
            </summary>
            <param name="SettingName"></param>
            <param name="SettingValue"></param>
            <param name="Encrypted"></param>
            <param name="EncryptedString"></param>
            <returns></returns>
        </member>
        <member name="P:ACT.Core.PortableSystemSettings.XMLConfigurationFileLocation">
             <summary>   Gets the XML configuration file location. </summary>
            
             <value> The XML configuration file location. </value>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.GetXMLData(System.String)">
            <summary>
            Reads the XML Configuration Data Into A String
            </summary>
            <param name="XMLFileLocation">Optional Location Set To OverRide Default</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.PortableSystemSettings.LogError(System.String,System.String,System.Exception,System.String,ACT.Core.Enums.ErrorLevel)">
            <summary>
            Logs an Error using CurrentErrorLoggable to grab current Plugin
            </summary>
            <seealso cref="!:DIP.Interfaces.IErrorLoggable"/>
            <param name="className"></param>
            <param name="summary"></param>
            <param name="ex"></param>
            <param name="additionInformation"></param>
            <param name="errorType"></param>
        </member>
        <member name="T:ACT.Core.Serialization.XML">
            <summary>
            XML Serialization Helper.  Quick and Dirty way to serialize/deserialize a basic class into XML
            </summary>
        </member>
        <member name="T:ACT.Core.TemplateEngine.ReplacementEngine">
            <summary>
            Basic Replacement Engine
            </summary>
        </member>
        <member name="T:ACT.Core.TemplateEngine.ReplacementEngine.ReplacementItem">
            <summary>
            Holds a single Replacement Item
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.ReplacementEngine.ReplacementItem.FieldName">
            <summary>
            Field Name As Found In Template
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.ReplacementEngine.ReplacementItem.IndexPositionData">
            <summary>
            Index Position data
            </summary>
        </member>
        <member name="M:ACT.Core.TemplateEngine.ReplacementEngine.FindAllReplacementFields(System.String,System.String)">
            <summary>
            Locate all Replacement Fields
            </summary>
            <param name="template">string Template</param>
            <param name="Pattern">Match Pattern PATTERN+FIELD+PATTERN 
                i.e. if Pattern="###"  ###FIRSTNAME###</param>
            <seealso cref="T:ACT.Core.TemplateEngine.ReplacementEngine.ReplacementItem"/>
            <returns>List of ReplacementItems</returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.ReplacementEngine.ProcessQueryResults(System.String,System.Collections.Generic.List{ACT.Core.TemplateEngine.ReplacementEngine.ReplacementItem},ACT.Core.Interfaces.DataAccess.I_QueryResult,System.Boolean,System.String)">
            <summary>
            Process the Template Processing
            </summary>
            <param name="template"></param>
            <param name="UseFullName"></param>
            <param name="ReplacementItems"></param>
            <param name="ResultSet"></param>
            <param name="Pattern"></param>
            <returns>Parsed Template as string</returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.ReplacementEngine.Process(System.String,ACT.Core.Interfaces.DataAccess.I_QueryResult,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Process a Template and Replace the Data
            </summary>
            <param name="template">Original Template</param>
            <param name="queryResults">Query Result To Process (1 DataTable Only)</param>
            <param name="otherReplacements">Dictionary Of Other Replacements</param>
            <param name="Pattern">Optional (Default is ###)</param>
            <seealso cref="!:ProcessQueryResults(string, bool, List&lt;ReplacementItem&gt;, Interfaces.DataAccess.I_QueryResult, string)"/>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.TemplateEngine.Template">
            <summary>
            Represents a Single Template
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template.BaseDirectory">
            <summary>
            Base File System Directory
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template.GroupName">
            <summary>
            Group Name
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template.Name">
            <summary>
            Item Name without Extension (used by database)
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template.Template_Type">
            <summary>
            Template Type
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.Template.TypeName">
            <summary>
            Type Name Unused In This version
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.Template.FileName">
            <summary>
            Filename Just the name with extension only used by the filesystem
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.Template.Data">
            <summary>
            Data inside the template All the PARSED Data
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.Template.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.TemplateEngine.AllTemplateData">
            <summary>
            All The Template Data Loaded Into Memory
            </summary>
        </member>
        <member name="F:ACT.Core.TemplateEngine.TemplateEngine.LoadedPackages">
            <summary>
            Loaded Packages
            </summary>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.GetAllData(System.Web.UI.Page)">
            <summary>
            Dont Know What this is for #TODO#
            </summary>
            <param name="MainPage"></param>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.GetTextTemplate(System.String,System.String)">
            <summary>
            Get the Text Template
            </summary>
            <param name="Path"></param>
            <param name="File"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.SimpleParse(System.String,System.Web.SessionState.HttpSessionState,System.Collections.Specialized.NameValueCollection)">
             <summary> Allows Values To Be Parsed Using ACT Notation #VARIABLE#.  
                       Session = SES- 
                       Querystring = QES-  
                       Example: "/login/default.aspx?LoginID=#SES-LoginID# 
                         would be like "/login/default.aspx?LoginID=" + Session["LoginID"].ToString()
             </summary>
            
             <value> The navigation URL. </value>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.InitTemplateManagerDB(System.String,System.String,System.Boolean)">
            <summary>
            Init The Template Manager For Database Usage
            </summary>
            <param name="DBConnectionName"></param>
            <param name="BaseDirectory"></param>
            <param name="ForceReload"></param>
            <param name="UserDefinedDB"></param>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.UpdateDatabase(System.String,System.String)">
            <summary>
            Updates The Database With The Latest Version Of The Templates
            </summary>
            <param name="DBConnectionName"></param>
            <param name="BaseDirectory"></param>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.GetTemplateDataDB(System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the template data from the Database Connection Name
            </summary>
            <param name="DBConnectionName"></param>
            <param name="SubType"></param>
            <param name="Name"></param>
            <param name="Version"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.TestACTIntegration(System.String)">
            <summary>
            TESTS For ACT Integration Status
            </summary>
            <param name="ConnectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.DeployDatabase(System.String,System.Boolean)">
            <summary>
            Deploy the database and Stored Procedures
            </summary>
            <param name="ConnectionName"></param>
            <param name="DropAndRecreate"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.InitTemplateManager(System.String,System.String,System.Boolean)">
            <summary>
            This configures the template manager to be used with a website. 
            </summary>
            <param name="BaseDirectory">Physical Path To Template Directory</param>
            <param name="TemplateType">Sub Directory Name Under Template Directory.</param>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.AddTemplateData(System.String,System.String)">
            <summary>
            LOCAL CACHE ONLY
            </summary>
            <param name="BaseDirectory"></param>
            <param name="TemplateType"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.ParseTemplate(ACT.Core.TemplateEngine.Template,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This processes a template executing replacement data
            </summary>
            <param name="TemplateClass">Template To Process</param>
            <param name="DR">Current DataRow To Process</param>
            <param name="QueryStringData">QueryString Data</param>
            <param name="SessionData">Session Data</param>
            <returns>Parsed Template</returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.ParseTemplate(ACT.Core.TemplateEngine.Template,System.Data.DataRow,System.Data.DataColumnCollection,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            A TEMPLATE REPLACEMENT CAN BE ONE OF THE FOLLOWING
                #COLUMNNAME# - Direct Replacement For a Column Name in the DR Passed To IT
                #PARSEFILE_FILENAME_(STOREDPROC|DATAROW)_PARAMA,PARAMB,PARAMC
            </summary>
            <param name="TemplateClass"></param>
            <param name="DR"></param>
            <param name="DC"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.ParseStoredProc(ACT.Core.TemplateEngine.Template,System.String,System.String,System.String,System.Data.DataRow,System.Data.DataColumnCollection,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses The Stored Proc 
            </summary>
            <param name="_ReplacementName"></param>
            <param name="BaseDirectory"></param>
            <param name="TemplateType"></param>
            <param name="DR"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.ProcessReplacementLogic(ACT.Core.TemplateEngine.Template,System.String,System.String@,System.Data.DataRow,System.Data.DataColumnCollection,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Process Replacement LOGIC
            </summary>
            <param name="TemplateClass">Template Class Being Replaced</param>
            <param name="ReplacementName">Replacment Name WITHOUT POOUNDS ###SOMEDATA### = SOMEDATA</param>
            <param name="TemplateStringData">REF TO CURRENT OUTPUT DATA</param>
            <param name="DR">DATA ROW</param>
            <param name="QueryStringData">QUERYSTRING DATA</param>
            <param name="SessionData">SESSION DATA</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.TemplateEngine.TemplateEngine.ProcessIFStatement(System.Int32,System.String,System.String@,System.Data.DataRow,System.Data.DataColumnCollection,ACT.Core.TemplateEngine.Template,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            PROCESS A DETECTED IF STATEMENT
            </summary>
            <param name="StartIndex">Starting Index Relative to TemplateStringData and Current IF Position</param>
            <param name="ReplacementName">REPLACEMENT NAME (ONLY THINGS INBETWEEN ###IF xxxxx ### = xxxxx</param>
            <param name="TemplateStringData">Current Template Data (Pass as Ref)</param>
            <param name="DR">Current Data Row</param>
            <returns>New Index Position</returns>
        </member>
        <member name="T:ACT.Core.TemplateEngine.Template_Engine_Settings">
            <summary>
            Template Engine Settings - Used When Initializing The Template Engine
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.UseDatabase">
            <summary>
            Use Database
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.ApplicationID">
            <summary>
            ApplicationID if NULL only use templates with NULL ApplicationID
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.UseCache">
            <summary>
            Use Cache - cache Tempaltes , Template Data, Parsed Template Etc..  
            CacheMethod determines scope
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.CacheMethod">
            <summary>
            Cache Methods - Scope of the Cache
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.CacheLevel">
            <summary>
            Cache Levels Are Defined as Follows
            1 - Template From Source Raw
            2 - Querystring Based Initial Load/Parse (No Post / Callbacks)
            4 - Viewstate Tracker (Expirimental)
            8 - Unique ID Tracker 
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.BaseFolder">
            <summary>
            Base folder for File System Based Templates
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.DatabaseConnectionName">
            <summary>
            Database Connection Name
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.DatabaseTablePrefix">
            <summary>
            Database Table Prefix
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.UseACTCloud">
            <summary>
            Use ACT Cloud as the Source
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.ACTConnectionInformation">
            <summary>
            ACT Connection Information - JSON Object with server, port, service login etc.
            </summary>
        </member>
        <member name="P:ACT.Core.TemplateEngine.Template_Engine_Settings.StoreInstanceInsideACT">
            <summary>
            Store Instance Inside ACT
            </summary>
        </member>
        <member name="M:ACT.Core.TemplateEngine.Template_Engine_Settings.#ctor">
            <summary>
            Basic Constructor
            </summary>
        </member>
        <member name="T:ACT.Core.ThirdParty.SMTP2GO.Message">
            <summary>
            SMTPTOOGO
            </summary>
        </member>
        <member name="T:ACT.Core.ThirdParty.SMTP2GO.CustomHeader">
            <summary>
            Custom Header
            </summary>
        </member>
        <member name="T:ACT.Core.ThirdParty.SMTP2GO.Message_Response">
            <summary>
            Message Response
            </summary>
        </member>
        <member name="F:ACT.Core.ThirdParty.SMTP2GO.Message_Response.Message_Response_Settings">
            <summary>
            Converter Settings
            </summary>
        </member>
        <member name="M:ACT.Core.ThirdParty.SMTP2GO.Message_Response.FromJson(System.String)">
            <summary>
            FromJson Method
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.ThirdParty.SMTP2GO.Message_Response.ToJson">
            <summary>
            ToJson Method
            </summary>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.ThirdParty.SMTP2GO.Message_Response_Data">
            <summary>
            Message Response Data
            </summary>
        </member>
        <member name="T:ACT.Core.Payment.CreditCard.CreditCardInfo">
            <summary>
            Suppors Standard US Credit Card Data
            </summary>
        </member>
        <member name="T:ACT.Core.Common.Code.CodeSignature">
             <summary>   A code signature. </summary>
            
             <remarks>   Mark Alicz, 12/19/2016. </remarks>
        </member>
        <member name="M:ACT.Core.Common.Code.CodeSignature.TryGetAssembly(System.String[],System.Boolean,System.Boolean)">
             <summary>   Try get assembly. </summary>
            
             <remarks>   Mark Alicz, 12/19/2016. </remarks>
            
             <param name="SearchPaths">          (Optional) the search paths. </param>
             <param name="DeepSearch">           (Optional) true to deep search. </param>
             <param name="Architecture64Bit">    (Optional) true to architecture 64 bit. </param>
            
             <returns>   A System.Reflection.Assembly. </returns>
        </member>
        <member name="T:ACT.Core.Constants">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Constants.VerboseDebugging">
            <summary>
            Gets the Verbose Debugging Constant
            </summary>
        </member>
        <member name="P:ACT.Core.Constants.SystemSettingsRegistryKey">
            <summary>
            Gets the SystemSettingsRegistryKey
            </summary>
        </member>
        <member name="P:ACT.Core.Constants.SystemSettingsRegistryValueName">
            <summary>
            Name if the System Settings Location
            </summary>
        </member>
        <member name="P:ACT.Core.Constants.SystemPluginsRegistryValueName">
            <summary>
            ACT Plugin Directory Locations
            </summary>
        </member>
        <member name="F:ACT.Core.Constants.AllAlphaNumericWithSpecial">
            <summary>
            a-zA-Z0-9 {Special}
            </summary>
        </member>
        <member name="F:ACT.Core.Constants.LowerAlpha">
            <summary>
            a-z
            </summary>
        </member>
        <member name="F:ACT.Core.Constants.UpperAlpha">
            <summary>
            A-Z
            </summary>
        </member>
        <member name="F:ACT.Core.Constants.AllAlpha">
            <summary>
            a-zA-Z
            </summary>
        </member>
        <member name="F:ACT.Core.Constants.AllAlphaNumeric">
            <summary>
            a-zA-Z0-9
            </summary>
        </member>
        <member name="T:ACT.Core.PluginArguments">
            <summary>
            Plugin Arguments Defines the Information needed to load a Assembly.
            </summary>
            
        </member>
        <member name="F:ACT.Core.PluginArguments.Loaded">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.PluginArguments.DLLName">
            <summary>
            Full DLL Name (i.e) MyDLL.dll
            </summary>
        </member>
        <member name="P:ACT.Core.PluginArguments.FullClassName">
            <summary>
            Full Class Name (i.e) MyNameSpace.MySub.MyClass
            </summary>
        </member>
        <member name="F:ACT.Core.PluginArguments.StoreOnce">
            <summary>
            Defines if the class should be treated like a singleton or not
            </summary>
        </member>
        <member name="F:ACT.Core.PluginArguments.Arguments">
            <summary>
            Optional Arguments the are required to create an instance of the class
            </summary>
        </member>
        <member name="M:ACT.Core.PluginArguments.#ctor">
            <summary>
            Empty Constructor for Generic Use
            </summary>
        </member>
        <member name="M:ACT.Core.PluginArguments.#ctor(System.String)">
            <summary>
            Loads the Plugin Arguments From the SystemConfiguration File Settings
            </summary>
            <param name="Interface"></param>
        </member>
        <member name="T:ACT.Core.CurrentCore`1">
            <summary>
            Current Core Represents the Entry Point for all Plugins.  Use this to gauruntee you get the defined plugin
            </summary>
        </member>
        <member name="M:ACT.Core.CurrentCore`1.ACTInstallLocations">
            <summary>
            Installation Locations
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.CurrentCore`1.GetCurrent">
            <summary>
            Gets the Current Default Interface Implementation as Defined in the Plugins Section of the Configuration File
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.CurrentCore`1.GetCurrent(ACT.Core.SystemSettingsInstance)">
            <summary>
            Gets the Current Default Interface Implementation as Defined in the Plugins Section of the Configuration File
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.CurrentCore`1.GetSpecific(ACT.Core.PluginArguments)">
            <summary>
            Returns the Interface implementation as defined by the custom plugin arguments
            </summary>
            <param name="Plugin">Plugin Arguments Defining Interface Implementation</param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Delegates.OnComplete">
            <summary>
            Generic Delegate Used Primarily to Determine When An Action Is completed.
            </summary>
            <param name="ReturnValue">Typical Usage Includes Passing An Action and An ID</param>
        </member>
        <member name="T:ACT.Core.Delegates.OnChanged">
            <summary>
            Generic Delegate Used Primarily to Determine When something has changed
            </summary>
            <param name="ReturnValue">Typical Usage Includes Passing An Action and An ID</param>
        </member>
        <member name="T:ACT.Core.Delegates.OnCommunication">
            <summary>
            On Communication Event
            </summary>
            <param name="Lines"></param>
        </member>
        <member name="T:ACT.Core.Delegates.OnError">
            <summary>
            Generic Delegate used to determine Error Happenings
            </summary>
            <param name="ex">Current Exception Object</param>
            <param name="Args">Additional Arguments</param>
        </member>
        <member name="T:ACT.Core.Delegates.OnMouseEvent">
            <summary>
            
            </summary>
            <param name="Event"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="UIElement"></param>
            <param name="OldX"></param>
            <param name="OldY"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Delegates.OnMenuItemClick">
            <summary>
            Used as a way to communicate menu item clicks.
            </summary>
            <param name="ItemName"></param>
            <param name="ID"></param>
        </member>
        <member name="T:ACT.Core.SystemSetting">
            <summary>
            Class the Represents a Single System Setting
            </summary>
        </member>
        <member name="F:ACT.Core.SystemSetting.GENERICPASSWORD">
            <summary>
            NO IDEA TODO REMOVE
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSetting.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.Encrypted">
            <summary>
            Is this value Encrypted?
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.InternalEncryption">
            <summary>
            Is this using Internal Encryption
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.IsEncrypted">
             <summary> Dont Know What This IS  Gets or sets the is encrypted. </summary>
            
             <value> The is encrypted. </value>
        </member>
        <member name="P:ACT.Core.SystemSetting.Name">
            <summary>
            Setting Name
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.Value">
            <summary>
            UnEncrypted Value
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.Pointer">
            <summary>
            Points to another property
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.EncryptedValue">
            <summary>
            Encrypted Value
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSetting.Key">
            <summary>   
            Gets or sets the key. 
            </summary>
            <value> The key. </value>
        </member>
        <member name="P:ACT.Core.SystemSetting.Order">
            <summary>
            Order of this setting item
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSetting.ExportXMLData(System.String)">
            <summary>
            Export the Setting To XML.  Encrypted Values that use keys must set the encrypted value unless it uses internal encryption
            </summary>
            <returns>XML</returns>
        </member>
        <member name="M:ACT.Core.SystemSetting.ImportXMLData(System.String)">
            <summary>
            Import XML Data
            </summary>
            <param name="XML">string XML Data</param>
            <returns>I_TestResult</returns>
        </member>
        <member name="T:ACT.Core.SystemSettings">
            <summary>
            Accesses the Confirguration Variables Defined In SystemConfiguration.xml
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSettings.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSettings.CurrentSettingFullFilePath">
            <summary>
            Returns and Generates the Location For The Settings File
            
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSettings.UpdateConfigurationFile(System.String)">
            <summary>
            Update Configuration File
            </summary>
            <param name="NewConfigData">New Configuration Data</param>
            <returns></returns>
        </member>
        <member name="P:ACT.Core.SystemSettings.LoadedSettingsDirectory">
            <summary>
            Returns the Directory of the Settings File
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSettings.Loading">
            <summary>
            Indicates the Settings are still loading
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSettings.Loaded">
            <summary>
            Defines the Loaded Property (If System Settings Have Been Loaded)
            </summary>
        </member>
        <member name="F:ACT.Core.SystemSettings.LoadErrors">
            <summary>
            Load Errors
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSettings.AddSearchPath(System.String)">
            <summary>
            Add a Search Path
            </summary>
            <param name="LocationPath">Search Path to Add</param>
            <returns></returns>
        </member>
        <member name="P:ACT.Core.SystemSettings.SearchPaths">
            <summary>
            Internal Search Paths List of Locations to Search the SystemConfiguration Files
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSettings.LoadSystemSettings(System.String)">
            <summary>
            Loads all the System Settings and Resets the Buffer
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSettings.SettingKeys">
            <summary>
            Return all the setting Keys
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSettings.LoadedSettings">
             <summary>   
             Gets the loaded settings. 
            </summary>
             <value> The loaded settings. </value>
        </member>
        <member name="M:ACT.Core.SystemSettings.ClearBuffer">
            <summary>
            Clears the Setting Buffer
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSettings.GetSettingByName(System.String)">
            <summary>
            Return a SystemSetting By Name (Returns Value="" If Not Found)
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.RemoveSetting(ACT.Core.SystemSetting)">
            <summary>
            Removes a Setting from the Static List and Saves it the the Hard Drive
            </summary>
            <param name="ItemToDelete">SystemSetting to Delete</param>
            <returns>True On Success</returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.SaveSetting(ACT.Core.SystemSetting,System.Boolean,System.String)">
            <summary>
            Saves the setting to the Static Dictionary and Saves it the the HardDrive
            </summary>
            <param name="ItemToSave">SystemSetting To Save</param>
            <param name="SaveFile">Save the file to Disk</param>
            <param name="EncryptionKey">Optional Encryption Key</param>
            <returns>True on Success</returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.AddUserSetting(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add User Setting
            </summary>
            <param name="SettingName"></param>
            <param name="SettingValue"></param>
            <param name="Encrypted"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.PerformSave">
            <summary>
            Writes the Current Values to the File System
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.PerformSaveAs(System.String)">
            <summary>
            Performs The Save Feature But Gets A New Location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.ExportJSONData">
            <summary>
            Export JSON - TODO Next Version
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.ImportJSONData">
            <summary>
            Import JSON - TODO Next Version
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.ExportXMLData">
            <summary>
            Exports the Settings without Regaurd to Order or Formatting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.ImportXMLData(System.String)">
            <summary>
            Trys and Imports the DATA.  THIS METHOD IS HARD CODED TO USE DIP_TestResults!!!!
            </summary>
            <param name="XML">XML as Unicode String</param>
            <returns>I_TestResult</returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.GetXMLData">
            <summary>
            Reads the XML Configuration Data Into A String
            </summary>
            <param name="XMLFileLocation">Optional Location Set To OverRide Default</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.GetErrorSetting(System.String)">
            <summary>
            Return a Setting that Represents an Error or Missing Setting
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.Test_AllInterfaces">
            <summary>
            Test All Interfaces Defined in the Configuration File
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.MeetsExpectations(ACT.Core.Interfaces.Common.I_Plugin)">
            <summary>
            This function tests the PLUGIN to determine if it meets Expectations
            </summary>
            <param name="Plugin"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettings.LogError(System.String,System.Exception,System.String,ACT.Core.Enums.ErrorLevel)">
            <summary>
            Logs an Error using CurrentErrorLoggable to grab current Plugin
            </summary>
            <seealso cref="!:DIP.Interfaces.IErrorLoggable"/>
            <param name="className"></param>
            <param name="summary"></param>
            <param name="ex"></param>
            <param name="additionInformation"></param>
            <param name="errorType"></param>
        </member>
        <member name="F:ACT.Core.SystemSettingsInstance.FileIsValid">
            <summary>
            Determines if the File Is Valid;
            </summary>
        </member>
        <member name="F:ACT.Core.SystemSettingsInstance.System_Settings">
            <summary>
            Local Copies Of The Settings That Exist In The Config File
            </summary>
        </member>
        <member name="P:ACT.Core.SystemSettingsInstance.SettingsFileLocation">
            <summary>
            Settings File Location
            </summary>
        </member>
        <member name="M:ACT.Core.SystemSettingsInstance.#ctor(System.String)">
            <summary>
            This utilizes the Generic Static Class Methods To Load the Values Then It 
            Copies them into local variables.  Then it reloads the Original Static Class
            Settings File Name
            </summary>
            <param name="SettingsFileLocation">Location Of The SystemConfiguration.xml File (Full File Path i.e. c:\test\systemconfiguration.xml)</param>
        </member>
        <member name="M:ACT.Core.SystemSettingsInstance.GetSettingByName(System.String)">
            <summary>
            Return a SystemSetting By Name (Returns Value="" If Not Found)
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettingsInstance.ImportXMLData(System.String)">
            <summary>
            Trys and Imports the DATA.  THIS METHOD IS HARD CODED TO USE DIP_TestResults!!!!
            </summary>
            <param name="XML">XML as Unicode String</param>
            <returns>bool</returns>
        </member>
        <member name="M:ACT.Core.SystemSettingsInstance.ExportXMLData">
            <summary>
            Exports The Current XML Data Into A String (XML)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.SystemSettingsInstance.GetXMLData(System.String)">
            <summary>
            Reads the XML Configuration Data Into A String
            </summary>
            <param name="XMLFileLocation">Optional Location Set To OverRide Default</param>
            <returns>XML On Success</returns>
        </member>
        <member name="M:ACT.Core.SystemSettingsInstance.Save">
            <summary>
            Saves The Data Into The SettingsXML File
            </summary>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Compression.Compressed_Data_Structure">
            <summary>
            This Represents a ZIP File
            When IsRoot = True Everything IS BLANK or Null Except for InputSize and OutputSize Which Represent the Total Size of the Data
            If FileName is Not Null Then Folder Must Not Be Null
            If Folder Is Not Null Then FileName must Not Be Null
            
            </summary>
        </member>
        <member name="M:ACT.Core.Compression.Compressed_Data_Structure.IsValid">
            <summary>
            Is This Struct Valid
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.IsRoot">
            <summary>
            Specifies If This is The Parent Object!
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.OutputData">
            <summary>
            Output ZIPFILE as an Array Of Bytes
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.InputSize">
            <summary>
            Input Size of The Files Contained Within
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.OutputSize">
            <summary>
            Output Size Of the ZipFile (Length Of OutputData)
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.FileName">
            <summary>
            The FileName
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.FolderName">
            <summary>
            The Folder Name
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_Data_Structure.Children">
            <summary>
            Children Of The Folder
            </summary>
        </member>
        <member name="T:ACT.Core.Compression.Compressed_File_Settings">
            <summary>
            If Source Folder Is Null, Then FilesToAdd Must Contain Data
            If Password is null ZipFile Will be UnEncrypted
            If Password is not null then the file will need to use the different types of encryption
            </summary>
        </member>
        <member name="M:ACT.Core.Compression.Compressed_File_Settings.IsValid">
            <summary>
            Returns True if the Structure Contains A Valid Combination Of Settings
            </summary>
            <returns></returns>
        </member>
        <member name="P:ACT.Core.Compression.Compressed_File_Settings.ZipFileEntryName">
            <summary>
            Returns a ZipArchive Formatted Name.  Needs to FIX TODO Remove Base Folder.
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_File_Settings.ZipFileLocation">
            <summary>
            Location of the Zip File Directory Only
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_File_Settings.ZipFileName">
            <summary>
            Zip File Name
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_File_Settings.SourceFolder">
            <summary>
            Source Folder
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_File_Settings.FilesToAddUpdate">
            <summary>
            List of Files (Full Path) To Add
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_File_Settings.FilesToExtract">
            <summary>
            List of Files To Extract
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.Compressed_File_Settings.AddAndEditSettings">
            <summary>
            Containts The Settings to Create and Alter a Zip File
            </summary>
        </member>
        <member name="T:ACT.Core.Compression.AlterAndCreateSettings">
            <summary>
            Containts The Settings to Create and Alter a Zip File
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.Password">
            <summary>
            Password to Encrypt/Decrypt The Zip File
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.OverwriteIfFound">
            <summary>
            Overwrite the Zipfile If Found
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.EncryptFileNames">
            <summary>
            Encrypt the File Names in the ZipFile, Also used to FLAG the System when Extracting
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.CreateDestination">
            <summary>
            Create the Destination Directory when Directory Doesnt Exist.
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.CompressionLevel">
            <summary>
            Compression Level 0 = Min to 9 = MAX
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.CreateWithFullPathInfo">
            <summary>
            Create with Full Path Info
            </summary>
        </member>
        <member name="F:ACT.Core.Compression.AlterAndCreateSettings.CreateWithNoPathInfo">
            <summary>
            Strip Path info and Create Just a List of Files
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ACT.Core.Web.ACTURLRewriter" -->
        <member name="M:ACT.Core.Web.ACTURLRewriter.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            TODO Increase Speed
            Look for Memory Leaks
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ACT.Core.Web.API.JSONReturn">
            <summary>
            Represents the return value of all WEB API Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Web.API.JSONReturn.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:ACT.Core.Web.API.JSONReturn.FromJson(System.String)">
            <summary>
            Converts string JSON to Object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.API.JSONReturn.ToJson">
            <summary>
            Return a JSON Object
            </summary>
            <returns></returns>
        </member>
        <member name="F:ACT.Core.Web.API.JSONReturn.JSONSettings">
            <summary>
            JSON Settings
            </summary>
        </member>
        <member name="T:ACT.Core.Web.CookieAwareWebClient">
            <summary>
            Create A Cookie Aware Web Client
            </summary>
        </member>
        <member name="T:ACT.Core.Web.DevExpress.MenuItem">
            <summary>
            MenuItem used for various DEVEXPRESS Controls
            </summary>
        </member>
        <member name="M:ACT.Core.Web.HelperMethods.ASPNET_Helper.GetAllLoadedModules(System.Web.HttpContext)">
            <summary>
            Returns all of the Loaded Modules
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Web.IIS.IIS8_5_Manager">
            <summary>
            IIS 8.5 Manager
            </summary>
        </member>
        <member name="M:ACT.Core.Web.IIS.IIS8_5_Manager.RemoveHostName(System.String,System.String,System.String,System.String)">
            <summary>
            Remove the host name for the SiteName
            </summary>
            <param name="SiteName"></param>
            <param name="IP"></param>
            <param name="HostName"></param>
            <param name="protocal"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Web.WebForms.ACT_WEB_PAGE">
            <summary>
            ACT WEB PAGE Allows you to create amazing easy functionality without the muss and fuss
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.#ctor">
            <summary>
            Constructor to Setup Event Handlers
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ACT_WEB_PAGE_PreInit(System.Object,System.EventArgs)">
            <summary>
            Event that happens before the page initialization
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnPageInitialized">
            <summary>
            Object Array = { IsPostBack, IsCallback, IsAsync }
            Executed 
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnCustomPostbackEvent">
            <summary>
            Processes Custom Events Triggered By AddCustomEvent
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnInitializePageData">
            <summary>
            Attach to this event to initialize the page
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnPageInitializing">
            <summary>
            Occurs before the Page is initialized.
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnPageLoad">
            <summary>
            On Load
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnPagePreLoad">
            <summary>
            Custom Pre Load Handler
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_PAGE.OnPagePreRenderComplete">
            <summary>
            Custom Pre Load Handler
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ACT_WEB_PAGE_PreRenderComplete(System.Object,System.EventArgs)">
            <summary>
            Runs the Pre Render Complete Event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ACT_WEB_PAGE_PreLoad(System.Object,System.EventArgs)">
            <summary>
            Pre Load Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ACT_WEB_PAGE_Load(System.Object,System.EventArgs)">
            <summary>
            Page Load Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ACT_WEB_PAGE_InitComplete(System.Object,System.EventArgs)">
            <summary>
            Page Init Complete Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ACT_WEB_PAGE_LoadComplete(System.Object,System.EventArgs)">
            <summary>
            Page Load Complete Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ACT.Core.Web.WebForms.ACT_WEB_PAGE.Form_Validator_Data">
            <summary>
            Form Validator Data Class. 
            Used in Validating The Data In A Form Automatically.
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.ACT_WEB_PAGE.Request_RequiredFields_Data">
            <summary>
            The class describes the required fields in request object and actions to take when not found
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.ACT_WEB_PAGE.Page_Settings">
            <summary>
            Page General Settings
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.ACT_WEB_PAGE.Page_Custom_Postback_Events">
            <summary>
            Holds the Page Custom Postback Events
            </summary>
        </member>
        <member name="F:ACT.Core.Web.WebForms.ACT_WEB_PAGE.QS">
            <summary>
            Quick Reference to the Query String Collection
            </summary>
        </member>
        <member name="F:ACT.Core.Web.WebForms.ACT_WEB_PAGE.FD">
            <summary>
            Quick reference to the Form Collection
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.RequestIPAddress">
            <summary>
            Request the IP Address
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.GetPreviousURL">
            <summary>
            Get the previous URL saved from the Initialization
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.GenerateRedirectURL">
            <summary>
            Generate Redirect URL
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.Parse_Redirect_URL">
            <summary>
            Generate Redurect URL From Embedded URL
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="F:ACT.Core.Web.WebForms.ACT_WEB_PAGE._RequiredRequestVariables">
            <summary>
            You can set the Required Fields for this Page. This is the Simple Implementation
            </summary>
        </member>
        <member name="F:ACT.Core.Web.WebForms.ACT_WEB_PAGE._ValidationData">
            <summary>
            List of the Form Validation Data
            </summary>
        </member>
        <member name="F:ACT.Core.Web.WebForms.ACT_WEB_PAGE._Settings">
            <summary>
            Holds the Page Settings data
            </summary>
        </member>
        <member name="F:ACT.Core.Web.WebForms.ACT_WEB_PAGE._customPostbackEvents">
            <summary>
            list of Custom Postback Events Documented for this Page
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.Custom_Postback_Events">
            <summary>
            Custom Page Events
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.RequiredRequestVariables">
            <summary>
            Required Request Variables (Load)
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ValidationData">
            <summary>
            Validation Data (Forms)
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.PageSettings">
            <summary>
            Page Settings
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.AuthenticateUser">
            <summary>
            Can be overridden to perform additional checks.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.MemberID">
            <summary>
            Member ID
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.SecurityDataEncrypted">
            <summary>
            Create the Encrypted Security Data - JS Validation
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.SecurityDataRaw">
            <summary>
            Raw Security Data - JS Validation
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_PAGE.AuthenticationErrorRedirectURL">
            <summary>
            Redirect URL for Unauthorized Users
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.GetCustomEvent_JSCode(System.String)">
            <summary>
            Generate - Custom Event JS Code
            </summary>
            <param name="EventName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.AddCustomEvent(System.String,System.ValueTuple{System.String,System.String})">
            <summary>
            Add a Custom Event To Track and Process.  This will call the event OnCustomPostbackEvent
            </summary>
            <param name="EventName">Name of the Event (Custom Defined)</param>
            <param name="PostbackData">EventTarget and EventArgument specified by the __DoPostback Method</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ValidateFormData(System.Web.UI.Control,System.String)">
            <summary>
            Validate the Page data
            </summary>
            <param name="Ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.CheckRequired_RequestVariables">
            <summary>
            Check the Required Query String Variables
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.InitializePageData(ACT.Core.Web.WebForms.ACT_WEB_PAGE.Page_Settings,System.Collections.Generic.List{ACT.Core.Web.WebForms.ACT_WEB_PAGE.Form_Validator_Data},System.Collections.Generic.List{ACT.Core.Web.WebForms.ACT_WEB_PAGE.Request_RequiredFields_Data})">
            <summary>
            Initialize the Page Data.  Should Be Called During Page Initialized
            </summary>
            <param name="ValidationData"></param>
            <param name="RequireRequestVariables"></param>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.InitializePageData_FromConfigurationSettings(System.String)">
            <summary>
            Load the Configuration Settings
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.ConfigureSecurityPage">
            <summary>
            Configure the Security Logic sets HandlerValidationVariable
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_PAGE.GenerateJavascriptValidation">
            <summary>
            Generate the Javascript Validation
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_CORE_JSWRITER.GenerateJSValidationScript(System.Collections.Generic.List{ACT.Core.Web.WebForms.ACT_WEB_PAGE.Form_Validator_Data},System.String)">
            <summary>
            Generate the Javascript Validation Script based on the Library
            </summary>
            <param name="ValidationData">List of Validation Data</param>
            <param name="Library">Custom Library (Not Used Currently)</param>
            <returns>String to Validate Form Data</returns>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings">
            <summary>
            Site Validation Settings
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.VerboseDebugging">
            <summary>
            Override ACT Verbose Debugging
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.LogAllData">
            <summary>
            Log All Data Sent To The Page
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequireAuthentication">
            <summary>
            Require Authentication (Is Authenticated Only)
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.UserIDSessionVariableName">
            <summary>
            OverRide UserID Session Variable Name
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageRequestVariablesErrorUrl">
            <summary>
            OverRide URL to send the user to if the Request Variables Fail
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.AuthenticationLoginUrl">
            <summary>
            OverRide URL to send the user to if the Request Variables Fail
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.BasePath">
            <summary>
            Base Path of the website.
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Sitename">
            <summary>
            The Site Name 
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Pages">
            <summary>
            All of the defined pages that are controled by the ACT Web Form
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.SiteVirtualPaths">
            <summary>
            Configured Virtual Paths
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.SiteValidationSettings.ToJson">
            <summary>
            Export Class To JSON
            </summary>
            <returns></returns>
        </member>
        <member name="F:ACT.Core.Web.WebForms.SiteValidationSettings.JSONConverterSettings">
            <summary>
            Json Converter Object
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.SiteValidationSettings.FromJson(System.String)">
            <summary>
            From JSON
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.SiteValidationSettings.GetValidationData(System.String)">
            <summary>
            Get Validation Data By The FullPath
            </summary>
            <param name="PageFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.SiteValidationSettings.GetRequestRequiredFields(System.String)">
            <summary>
            Get request Required Fields
            </summary>
            <param name="PageFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.SiteValidationSettings.GetPageSettings(System.String)">
            <summary>
            Gets the Page Settings
            </summary>
            <param name="PageFullPath"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings.VirtualPaths">
            <summary>
            Manages the virtual Friendly paths the user will experience
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.VirtualPaths.RelativePath">
            <summary>
            The Relative Path From the Root /pages/test/test.html
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.VirtualPaths.FriendlyPath">
            <summary>
            Represents the Relative Friendly Path - /testpage
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.VirtualPaths.AllowPost">
            <summary>
            Allow Posts
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.VirtualPaths.AllowGet">
            <summary>
            Allow Get
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.VirtualPaths.RequirePostValidation">
            <summary>
            Allow Posts
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings.Page">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Page.Path">
            <summary>
            The Virtual Path to the Page = (Settings Root Path + Virtual Path)
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Page.Formvalidation">
            <summary>
            List of Form Validation Settings To Ensure
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Page.Requestfields">
            <summary>
            List of Request Fields (Data Submitted to Page)
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Page.Pagesettings">
            <summary>
            Page Specific Settings
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings.Formvalidation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Formvalidation.Groupname">
            <summary>
            Group Name
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Formvalidation.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings.Field">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Controlid">
            <summary>
            Control ID
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Allownulls">
            <summary>
            Allow Nulls
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Optional">
            <summary>
            Optional
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Datatype">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.FieldRequired">
            <summary>
            Field is Required
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Allowblank">
            <summary>
            Allow Blanks
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Min">
            <summary>
            Min valud For Integer Types
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Max">
            <summary>
            Max Valud For Integer Types
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Regex">
            <summary>
            Regular Expression To Validate Against
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Errormessage">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.Field.Isemailaddress">
            <summary>
            Is Email Address
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings.VerboseDebugging">
            <summary>
            Override ACT Verbose Debugging
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings.LogAllData">
            <summary>
            Log All Data Sent To The Page
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings.RequireAuthentication">
            <summary>
            Require Authentication (Is Authenticated Only)
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings.PageRequestVariablesErrorUrl">
            <summary>
            OverRide URL to send the user to if the Request Variables Fail
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings.UserIDSessionVariableName">
            <summary>
            OverRide UserID Session Variable Name
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.PageSettings.HandlerValidationVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField">
            <summary>
            
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Optional">
            <summary>
            Optional
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Fieldname">
            <summary>
            Field Name
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Allowblanks">
            <summary>
            Allow Blanks
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Datatype">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Regex">
            <summary>
            Regular Expression
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Redirecturl">
            <summary>
            Redirect URL
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Allownulls">
            <summary>
            Allow Nulls
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Dependson">
            <summary>
            Depends On
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.SiteValidationSettings.RequestField.Validstrings">
            <summary>
            Valid Strings
            </summary>
        </member>
        <member name="P:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.ControlID">
            <summary>
            Represents the ControlID Outside of the ID Value.  Used For Custom Eventing
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.#ctor">
            <summary>
            Constructor to Setup Event Handlers
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.OnControlLoad">
            <summary>
            Object Array = { IsPostBack, IsCallback, IsAsync }
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.OnControlDatabind">
            <summary>
            Processes Custom Events Triggered By AddCustomEvent
            </summary>
        </member>
        <member name="E:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.OnControlInit">
            <summary>
            Attach to this event to initialize the page
            </summary>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.GetCustomEvent_JSCode(System.String)">
            <summary>
            Generate - Custom Event JS Code
            </summary>
            <param name="EventName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Web.WebForms.ACT_WEB_CONTROL.AddCustomEvent(System.String,System.ValueTuple{System.String,System.String})">
            <summary>
            Add a Custom Event To Track and Process.  This will call the event OnCustomPostbackEvent
            </summary>
            <param name="EventName">Name of the Event (Custom Defined)</param>
            <param name="PostbackData">EventTarget and EventArgument specified by the __DoPostback Method</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.ActiveDirectory.ActiveDirectoryHelper.GetUserFromGroup(System.String,System.String)">
            <summary>
            This function will take a DL or Group name and return list of users
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.COM.ACT_ComInteropHelper.releaseObject(System.Object@)">
            <summary>
            Release The Object
            </summary>
            <param name="obj">COM Object To Release</param>
        </member>
        <member name="M:ACT.Core.Windows.COM.ACT_ComInteropHelper.releaseObject(System.Object)">
            <summary>
            release the object without the REF Tag
            </summary>
            <param name="obj">COM Object To Release</param>
        </member>
        <member name="T:ACT.Core.Windows.Console.Helper">
            <summary>
            Console Helper Class.  Making your console development Much Easier
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.Console.Helper.FindWindow(System.String)">
            <summary>
            Find a window by the window caption
            </summary>
            <param name="WindowCaption">Window Caption To Find</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:ACT.Core.Windows.Console.Helper.ShowConsoleWindow(System.IntPtr)">
            <summary>
            Show ConsoleWindow based on the IntPtr
            </summary>
            <param name="Handle">IntPtr</param>
            <returns>bool</returns>
        </member>
        <member name="M:ACT.Core.Windows.Console.Helper.HideConsoleWindow(System.IntPtr)">
            <summary>
            Hide the console window
            </summary>
            <param name="Handle"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.Console.Helper.GetPassword(System.ConsoleColor,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets a Password using Masking
            </summary>
            <param name="FontColor"></param>
            <param name="Prompt"></param>
            <param name="PasswordChar"></param>
            <param name="IllegalCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.Console.Helper.GetInputs(System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.Boolean,System.ConsoleColor,System.ConsoleColor,System.Collections.Generic.List{System.ValueTuple{System.String,System.ConsoleColor}},System.Collections.Generic.List{System.ValueTuple{System.String,System.String}})">
            <summary>
            Get various inputs from the console.
            </summary>
            <param name="Prompts">List of Prompts using Tuple (Key,Prompt)</param>
            <param name="ClearWindow">Clear the Window When Starting</param>
            <param name="BaseForegroundColor">Base ForegroundColor</param>
            <param name="BackgroundColor">Base BackgroundColor</param>
            <param name="PromptDisplayColors">Array of Display Colors based on Keys</param>
            <param name="RegularExpressionData">List of Regular Expressions to Test</param>
            <returns>Dictionary of Key/Values</returns>
        </member>
        <member name="M:ACT.Core.Windows.Console.Helper.ConfirmChoice(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the user tp Confirm the Choices by Typing an Option
            </summary>
            <param name="Prompt">Prompt to show the user</param>
            <param name="Choices">Array of Choices</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.Dynamic_Selector.Show(System.Windows.Forms.Form,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Show the Dialog Box to select from a list of items.
            </summary>
            <param name="Parent"></param>
            <param name="FormTitle"></param>
            <param name="TitleMSG"></param>
            <param name="ItemListLabel"></param>
            <param name="ItemsToAdd"></param>
            <param name="ButtonText"></param>
            <returns></returns>
        </member>
        <member name="F:ACT.Core.Windows.Dynamic_Selector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.Dynamic_Selector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ACT.Core.Windows.Dynamic_Selector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.Events.WriteToWindowsEventLog(System.String,ACT.Core.Windows.Events.EventLogLocation,System.String,System.Int32)">
            <summary>
            Saves the Data To The Event Log In Windows
            </summary>
            <param name="Source"></param>
            <param name="EventText"></param>
            <param name="EventID"></param>
        </member>
        <member name="T:ACT.Core.Windows.HelperMethods">
            <summary>
            Helper Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.HelperMethods.GetCurrentWindowsLoggedInUser(System.Boolean)">
            <summary>
            Get Current Windows Logged In User
            </summary>
            <param name="OnlyUserName">Display Only UserName or Full Path</param>
            <returns>string</returns>
        </member>
        <member name="T:ACT.Core.Windows.I32WindowWrapper">
            <summary>
            Window Wrapper
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.I32WindowWrapper.#ctor(System.IntPtr)">
            <summary>
            Constructor With IntPTR
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:ACT.Core.Windows.I32WindowWrapper.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="T:ACT.Core.Windows.InputBoxResult">
            <summary>
            Class used to store the result of an InputBox.Show message.
            </summary>
        </member>
        <member name="T:ACT.Core.Windows.Security.Elevate">
            <summary>
            
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.Security.Elevate.IsUserInAdminGroup">
            <summary> 
            The function checks whether the primary access token of the process belongs  
            to user account that is a member of the local Administrators group, even if  
            it currently is not elevated. 
            </summary> 
            <returns> 
            Returns true if the primary access token of the process belongs to user  
            account that is a member of the local Administrators group. Returns false  
            if the token does not. 
            </returns> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            When any native Windows API call fails, the function throws a Win32Exception  
            with the last error code. 
            </exception> 
        </member>
        <member name="M:ACT.Core.Windows.Security.Elevate.IsRunAsAdmin">
            <summary> 
            The function checks whether the current process is run as administrator. 
            In other words, it dictates whether the primary access token of the  
            process belongs to user account that is a member of the local  
            Administrators group and it is elevated. 
            </summary> 
            <returns> 
            Returns true if the primary access token of the process belongs to user  
            account that is a member of the local Administrators group and it is  
            elevated. Returns false if the token does not. 
            </returns> 
        </member>
        <member name="M:ACT.Core.Windows.Security.Elevate.IsProcessElevated">
            <summary> 
            The function gets the elevation information of the current process. It  
            dictates whether the process is elevated or not. Token elevation is only  
            available on Windows Vista and newer operating systems, thus  
            IsProcessElevated throws a C++ exception if it is called on systems prior  
            to Windows Vista. It is not appropriate to use this function to determine  
            whether a process is run as administartor. 
            </summary> 
            <returns> 
            Returns true if the process is elevated. Returns false if it is not. 
            </returns> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            When any native Windows API call fails, the function throws a Win32Exception  
            with the last error code. 
            </exception> 
            <remarks> 
            TOKEN_INFORMATION_CLASS provides TokenElevationType to check the elevation  
            type (TokenElevationTypeDefault / TokenElevationTypeLimited /  
            TokenElevationTypeFull) of the process. It is different from TokenElevation  
            in that, when UAC is turned off, elevation type always returns  
            TokenElevationTypeDefault even though the process is elevated (Integrity  
            Level == High). In other words, it is not safe to say if the process is  
            elevated based on elevation type. Instead, we should use TokenElevation.  
            </remarks> 
        </member>
        <member name="M:ACT.Core.Windows.Security.Elevate.GetProcessIntegrityLevel">
            <summary> 
            The function gets the integrity level of the current process. Integrity  
            level is only available on Windows Vista and newer operating systems, thus  
            GetProcessIntegrityLevel throws a C++ exception if it is called on systems  
            prior to Windows Vista. 
            </summary> 
            <returns> 
            Returns the integrity level of the current process. It is usually one of  
            these values: 
             
               SECURITY_MANDATORY_UNTRUSTED_RID - means untrusted level. It is used  
               by processes started by the Anonymous group. Blocks most write access. 
               (SID: S-1-16-0x0) 
                
               SECURITY_MANDATORY_LOW_RID - means low integrity level. It is used by 
               Protected Mode Internet Explorer. Blocks write acess to most objects  
               (such as files and registry keys) on the system. (SID: S-1-16-0x1000) 
             
               SECURITY_MANDATORY_MEDIUM_RID - means medium integrity level. It is  
               used by normal applications being launched while UAC is enabled.  
               (SID: S-1-16-0x2000) 
                
               SECURITY_MANDATORY_HIGH_RID - means high integrity level. It is used  
               by administrative applications launched through elevation when UAC is  
               enabled, or normal applications if UAC is disabled and the user is an  
               administrator. (SID: S-1-16-0x3000) 
                
               SECURITY_MANDATORY_SYSTEM_RID - means system integrity level. It is  
               used by services and other system-level applications (such as Wininit,  
               Winlogon, Smss, etc.)  (SID: S-1-16-0x4000) 
             
            </returns> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            When any native Windows API call fails, the function throws a Win32Exception  
            with the last error code. 
            </exception> 
        </member>
        <member name="M:ACT.Core.Windows.Security.Elevate.ElevateMe">
            <summary>
            Elevated The Current Process If Not As Admin Is True
            </summary>
        </member>
        <member name="T:ACT.Core.Windows.Security.SID_AND_ATTRIBUTES">
            <summary> 
            The structure represents a security identifier (SID) and its  
            attributes. SIDs are used to uniquely identify users or groups. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Windows.Security.TOKEN_ELEVATION">
            <summary> 
            The structure indicates whether a token has elevated privileges. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Windows.Security.TOKEN_MANDATORY_LABEL">
            <summary> 
            The structure specifies the mandatory integrity level for a token. 
            </summary> 
        </member>
        <member name="T:ACT.Core.Windows.Security.SafeTokenHandle">
            <summary> 
            Represents a wrapper class for a token handle. 
            </summary> 
        </member>
        <member name="M:ACT.Core.Windows.Security.NativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,ACT.Core.Windows.Security.SafeTokenHandle@)">
            <summary> 
            The function opens the access token associated with a process. 
            </summary> 
            <param name="hProcess"> 
            A handle to the process whose access token is opened. 
            </param> 
            <param name="desiredAccess"> 
            Specifies an access mask that specifies the requested types of  
            access to the access token.  
            </param> 
            <param name="hToken"> 
            Outputs a handle that identifies the newly opened access token  
            when the function returns. 
            </param> 
            <returns></returns> 
        </member>
        <member name="M:ACT.Core.Windows.Security.NativeMethods.DuplicateToken(ACT.Core.Windows.Security.SafeTokenHandle,ACT.Core.Enums.Windows.SECURITY_IMPERSONATION_LEVEL,ACT.Core.Windows.Security.SafeTokenHandle@)">
            <summary> 
            The function creates a new access token that duplicates one  
            already in existence. 
            </summary> 
            <param name="ExistingTokenHandle"> 
            A handle to an access token opened with TOKEN_DUPLICATE access. 
            </param> 
            <param name="ImpersonationLevel"> 
            Specifies a SECURITY_IMPERSONATION_LEVEL enumerated type that  
            supplies the impersonation level of the new token. 
            </param> 
            <param name="DuplicateTokenHandle"> 
            Outputs a handle to the duplicate token.  
            </param> 
            <returns></returns> 
        </member>
        <member name="M:ACT.Core.Windows.Security.NativeMethods.GetTokenInformation(ACT.Core.Windows.Security.SafeTokenHandle,ACT.Core.Enums.Windows.TOKEN_INFORMATION_CLASS,System.IntPtr,System.Int32,System.Int32@)">
            <summary> 
            The function retrieves a specified type of information about an  
            access token. The calling process must have appropriate access  
            rights to obtain the information. 
            </summary> 
            <param name="hToken"> 
            A handle to an access token from which information is retrieved. 
            </param> 
            <param name="tokenInfoClass"> 
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated  
            type to identify the type of information the function retrieves. 
            </param> 
            <param name="pTokenInfo"> 
            A pointer to a buffer the function fills with the requested  
            information. 
            </param> 
            <param name="tokenInfoLength"> 
            Specifies the size, in bytes, of the buffer pointed to by the  
            TokenInformation parameter.  
            </param> 
            <param name="returnLength"> 
            A pointer to a variable that receives the number of bytes needed  
            for the buffer pointed to by the TokenInformation parameter.  
            </param> 
            <returns></returns> 
        </member>
        <member name="M:ACT.Core.Windows.Security.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.IntPtr)">
            <summary> 
            Sends the specified message to a window or windows. The function  
            calls the window procedure for the specified window and does not  
            return until the window procedure has processed the message.  
            </summary> 
            <param name="hWnd"> 
            Handle to the window whose window procedure will receive the  
            message. 
            </param> 
            <param name="Msg">Specifies the message to be sent.</param> 
            <param name="wParam"> 
            Specifies additional message-specific information. 
            </param> 
            <param name="lParam"> 
            Specifies additional message-specific information. 
            </param> 
            <returns></returns> 
        </member>
        <member name="M:ACT.Core.Windows.Security.NativeMethods.GetSidSubAuthority(System.IntPtr,System.UInt32)">
            <summary> 
            The function returns a pointer to a specified subauthority in a  
            security identifier (SID). The subauthority value is a relative  
            identifier (RID). 
            </summary> 
            <param name="pSid"> 
            A pointer to the SID structure from which a pointer to a  
            subauthority is to be returned. 
            </param> 
            <param name="nSubAuthority"> 
            Specifies an index value identifying the subauthority array  
            element whose address the function will return. 
            </param> 
            <returns> 
            If the function succeeds, the return value is a pointer to the  
            specified SID subauthority. To get extended error information,  
            call GetLastError. If the function fails, the return value is  
            undefined. The function fails if the specified SID structure is  
            not valid or if the index value specified by the nSubAuthority  
            parameter is out of bounds. 
            </returns> 
        </member>
        <member name="T:ACT.Core.Windows.Securitytest.Helper">
            <summary>
            Helper Method
            </summary>
        </member>
        <member name="P:ACT.Core.Windows.Securitytest.Helper.GetExecutingAccountName">
            <summary>
            Gets the executing Account Name
            </summary>
        </member>
        <member name="T:ACT.Core.Windows.Services.WindowsServices">
            <summary>
            Windows Services Helper Methods
            </summary>
        </member>
        <member name="M:ACT.Core.Windows.Services.WindowsServices.ServiceInstaller.Uninstall(System.String)">
            <summary>
            Uninstall a Windows Service By Name
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="M:ACT.Core.Windows.Services.WindowsServices.ServiceInstaller.ServiceIsInstalled(System.String)">
            <summary>
            Test if a Services is installed by Name
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.Services.WindowsServices.ServiceInstaller.InstallAndStart(System.String,System.String,System.String)">
            <summary>
            Install the Service
            This method will only work if the assembly is executing under elevated permissions
            </summary>
            <param name="serviceName"></param>
            <param name="displayName"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:ACT.Core.Windows.Services.WindowsServices.ServiceInstaller.StartService(System.String)">
            <summary>
            Start the Service
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="M:ACT.Core.Windows.Services.WindowsServices.ServiceInstaller.StopService(System.String)">
            <summary>
            Stop The Service
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="M:ACT.Core.Windows.Services.WindowsServices.ServiceInstaller.GetServiceStatus(System.String)">
            <summary>
            Get the Service Status
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.User32.ExternMethods.GetClassNameOfWindow(System.IntPtr)">
            <summary>
            Return the Class Name (String) From a Window Handle
            </summary>
            <param name="hwnd">Window Handle To Get The class Name</param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.Windows.User32.ExternMethods.GetCaptionOfWindow(System.IntPtr)">
            <summary>
            Get The Window Caption From The Window Handle
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="T:ACT.Core.ACTConsole.ACTMenuSystem.MenuSystem">
            <summary>
            ACT Menu System - Make Your Console Menu Mean Something
            </summary>
        </member>
        <member name="M:ACT.Core.ACTConsole.ACTMenuSystem.MenuSystem.InitMenuSystem(System.ConsoleColor,System.ConsoleColor,System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Initialize the ACT Menu System
            </summary>
            <param name="BackgroundColor"></param>
            <param name="ForegroundColor"></param>
            <param name="Columns"></param>
            <param name="Rows"></param>
            <param name="MenuLocation"></param>
            <param name="RequireEnterForMenuSelect"></param>
            <param name="BaseHelpText">Help for when they type ? or help with no qualifier</param>
        </member>
        <member name="M:ACT.Core.ACTConsole.ACTMenuSystem.MenuSystem.PopulateParentIds(ACT.Core.ACTConsole.ACTMenuSystem.MenuItems)">
            <summary>
            Populate the Parent Ids
            </summary>
            <param name="ParentMenu"></param>
        </member>
        <member name="M:ACT.Core.ACTConsole.ACTMenuSystem.MenuSystem.GetFromId(System.Int32)">
            <summary>
            Get the Menu from the MenuId
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:ACT.Core.ACTConsole.ACTMenuSystem.MenuSystem.Draw(System.Int32)">
            <summary>
            Draw the Menu By Menu Id
            </summary>
            <param name="MenuId"></param>
        </member>
        <member name="T:ACT.Core.ACTConsole.ACTMenuSystem.MenuItems">
             <summary>   A menu. </summary>
            
             <remarks>   Mark Alicz, 10/28/2016. </remarks>
             
        </member>
        <member name="T:System.IO.ACTDirectory">
            <summary>
            ACT Dictionary Class
            </summary>
        </member>
        <member name="F:System.IO.ACTDirectory.LastExecute">
            <summary>
            The Last Execution Time
            </summary>
        </member>
        <member name="M:System.IO.ACTDirectory.LoadAllFilesIntoBuffer(System.String,System.String,System.String,System.Int32)">
            <summary>
            Loads all the files in the directory matching the pattern, This can Consume Alot Of Memory
            </summary>
            <param name="Path">the String Path</param>
            <param name="FileNameContains">This is the Text that the file name must contain, empty or * means all files, Comma Seperated Is OK</param>
            <param name="FileNameExtensions">This is the Extensions allowed blank or * means all, comma seperated ok</param>
            <param name="RetentionTimeInSeconds">Total Time to Keep Data In Buffer, 0 means forever</param>
            <returns type="int32">Number of Files Loaded, -2 = Path Doesnt Exist</returns>
        </member>
        <member name="M:System.IO.ACTDirectory.CleanBuffer">
            <summary>
            Cleans The Buffer Based On TimeStamps
            </summary>
        </member>
        <member name="T:System.BitStorage">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.BitStorage.value">
            <summary>
            Actual Value
            </summary>
        </member>
        <member name="M:System.BitStorage.SetNames(System.String[])">
            <summary>
            Set Names Based on Array of Data
            </summary>
            <param name="NamesArray"></param>
        </member>
        <member name="M:System.BitStorage.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            BitStorage Constructor
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:System.BitStorage.GetPositionValue(System.Int32)">
            <summary>
            Get Position Value
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitStorage.IsTrue(System.String)">
            <summary>
            IsTrue
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitStorage.Clear">
            <summary>
            Clear the Value
            </summary>
        </member>
        <member name="M:System.BitStorage.op_Implicit(System.String[])~System.BitStorage">
            <summary>
            BitStorage Implicit Operator
            </summary>
            <param name="D">string[] Parameter</param>
        </member>
        <member name="M:System.BitStorage.op_Equality(System.BitStorage,System.BitStorage)">
            <summary>
            Equal Operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitStorage.op_Inequality(System.BitStorage,System.BitStorage)">
            <summary>
            Not Equal Operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:System.BitStorage.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.BitStorage.Equals(System.Object)">
            <summary>
            Equals Override
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
    </members>
</doc>
